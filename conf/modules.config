/*
========================================================================================
    Config file for defining DSL2 per module options and publishing paths
========================================================================================
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

//
// General configuration options
//

process {
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            pattern: '*_versions.yml'
        ]
    }
}

//
// Generic genome preparation options
//

process {
    if (!params.skip_asciigenome) {
        withName: CUSTOM_GETCHROMSIZES {
            publishDir = [
                path: { "${params.outdir}/genome" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }
    }
}

//
// Illumina genome preparation options
//

if (params.platform == 'illumina') {
    process {

        withName: 'UNTAR_.*' {
            ext.args2 = '--no-same-owner'
        }

        withName: BLAST_MAKEBLASTDB {
            ext.args = '-parse_seqids -dbtype nucl'
            publishDir = [
                path: { "${params.outdir}/genome/db" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }
    }
}

if (params.platform == 'illumina') {
    if (!params.skip_variants) {
        process {
            withName: 'NFCORE_VIRALRECON:ILLUMINA:.*:BAM_SORT_SAMTOOLS:BAM_STATS_SAMTOOLS:.*' {
                publishDir = [
                    path: { "${params.outdir}/variants/bowtie2/samtools_stats" },
                    mode: 'copy',
                    pattern: "*.{stats,flagstat,idxstats}"
                ]
            }

            withName: 'NFCORE_VIRALRECON:ILLUMINA:.*:BAM_SORT_SAMTOOLS:SAMTOOLS_SORT' {
                ext.prefix = { "${meta.id}.sorted" }
                publishDir = [
                    path: { "${params.outdir}/variants/bowtie2" },
                    mode: 'copy',
                    pattern: "*.bam"
                ]
            }

            withName: 'NFCORE_VIRALRECON:ILLUMINA:.*:BAM_SORT_SAMTOOLS:SAMTOOLS_INDEX' {
                publishDir = [
                    path: { "${params.outdir}/variants/bowtie2" },
                    mode: 'copy',
                    pattern: "*.bai"
                ]
            }
        }

        process {
            withName: BCFTOOLS_MPILEUP {
                ext.args  = '--count-orphans --no-BAQ --max-depth 0 --min-BQ 20 --annotate FORMAT/AD,FORMAT/ADF,FORMAT/ADR,FORMAT/DP,FORMAT/SP,INFO/AD,INFO/ADF,INFO/ADR'
                ext.args2 = '--ploidy 1 --keep-alts --keep-masked-ref --multiallelic-caller --variants-only'
                ext.args3 = "--include 'INFO/DP>=10'"
            }

            withName: BEDTOOLS_GENOMECOV {
                ext.args   = "-bga | awk '\$4 < 10'"
                ext.prefix = { "${meta.id}.coverage" }
            }

            withName: BEDTOOLS_MERGE {
                ext.prefix = { "${meta.id}.coverage.merged" }
            }

            withName: BCFTOOLS_CONSENSUS {
                ext.prefix = { "${meta.id}.consensus" }
            }
        }
    }
}

if (params.platform == 'nanopore') {
    process {
        withName: SAMTOOLS_VIEW {
            ext.args = '-b -F 4'
        }
    }
}
