/*
========================================================================================
    Config file for defining DSL2 per module options and publishing paths
========================================================================================
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

def assemblers = params.assemblers ? params.assemblers.split(',').collect{ it.trim().toLowerCase() } : []
def callers    = params.callers    ? params.callers.split(',').collect{ it.trim().toLowerCase() }    : []

//
// General configuration options
//

process {
    withName: 'GUNZIP_.*' {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: 'UNTAR_.*' {
        ext.args2 = '--no-same-owner'
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: CAT_FASTQ {
        publishDir = [
            path: { "${params.outdir}/fastq" },
            enabled: false
        ]
    }

    withName: 'MULTIQC_TSV_.*' {
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            enabled: false
        ]
    }
}

if (!params.skip_fastqc) {
    process {
        withName: FASTQC_RAW {
            ext.args = '--quiet'
            publishDir = [
                path: { "${params.outdir}/fastqc/raw" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: FASTQC_TRIM {
            ext.args = '--quiet'
            publishDir = [
                path: { "${params.outdir}/fastqc/trim" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

if (!params.skip_fastp) {
    process {
        withName: FASTP {
            ext.args = '--cut_front --cut_tail --trim_poly_x --cut_mean_quality 30 --qualified_quality_phred 30 --unqualified_percent_limit 10 --length_required 50'
            publishDir = [
                [
                    path: { "${params.outdir}/fastp" },
                    mode: 'copy',
                    pattern: "*.{json,html}"
                ],
                [
                    path: { "${params.outdir}/fastp/log" },
                    mode: 'copy',
                    pattern: "*.log"
                ],
                [
                    path: { "${params.outdir}/fastp" },
                    mode: 'copy',
                    pattern: "*.fail.fastq.gz",
                    enabled: params.save_trimmed_fail
                ]
            ]
        }
    }
}

if (!params.skip_kraken2) {
    process {
        withName: KRAKEN2_BUILD {
            publishDir = [
                path: { "${params.outdir}/genome" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: KRAKEN2_KRAKEN2 {
            ext.args = '--report-zero-counts'
            publishDir = [
                path: { "${params.outdir}/kraken2" },
                mode: 'copy',
                pattern: "*.txt"
            ]
        }
    }
}

//
// Optional configuration options
//

if (!params.skip_variants) {

    process {
        withName: BOWTIE2_BUILD {
            ext.args = '--seed 1'
            publishDir = [
                path: { "${params.outdir}/genome" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: BOWTIE2_ALIGN {
            ext.args = '--local --very-sensitive-local --seed 1'
            ext.args2 = '-F4'
            publishDir = [
                [
                    path: { "${params.outdir}/variants/bowtie2/log" },
                    mode: 'copy',
                    pattern: "*.log"
                ],
                [
                    path: { "${params.outdir}/variants/bowtie2/unmapped" },
                    mode: 'copy',
                    pattern: "*.fastq.gz",
                    enabled: params.save_unaligned
                ]
            ]
        }

        withName: 'NFCORE_VIRALRECON:ILLUMINA:ALIGN_BOWTIE2:BAM_SORT_SAMTOOLS:SAMTOOLS_SORT' {
            ext.prefix = { "${meta.id}.sorted" }
            publishDir = [
                path: { "${params.outdir}/variants/bowtie2" },
                mode: 'copy',
                pattern: "*.bam"
            ]
        }

        withName: 'NFCORE_VIRALRECON:ILLUMINA:ALIGN_BOWTIE2:BAM_SORT_SAMTOOLS:SAMTOOLS_INDEX' {
            publishDir = [
                path: { "${params.outdir}/variants/bowtie2" },
                mode: 'copy',
                pattern: "*.bai"
            ]
        }

        withName: 'NFCORE_VIRALRECON:ILLUMINA:ALIGN_BOWTIE2:BAM_SORT_SAMTOOLS:BAM_STATS_SAMTOOLS:.*' {
            publishDir = [
                path: { "${params.outdir}/variants/bowtie2/samtools_stats" },
                mode: 'copy',
                pattern: "*.{stats,flagstat,idxstats}"
            ]
        }
    }

    if (!params.skip_ivar_trim && params.protocol == 'amplicon') {
        process {
            withName: IVAR_TRIM {
                ext.args = [
                    '-m 30 -q 20',
                    params.ivar_trim_noprimer ? '' : '-e',
                    params.ivar_trim_offset   ? "-x ${params.ivar_trim_offset}" : ''
                ].join(' ').trim()
                ext.prefix = { "${meta.id}.ivar_trim" }
                publishDir = [
                    path: { "${params.outdir}/variants/bowtie2/log" },
                    mode: 'copy',
                    pattern: '*.log'
                ]
            }

            withName: 'NFCORE_VIRALRECON:ILLUMINA:PRIMER_TRIM_IVAR:BAM_SORT_SAMTOOLS:SAMTOOLS_SORT' {
                ext.prefix = { "${meta.id}.ivar_trim.sorted" }
                publishDir = [
                    path: { "${params.outdir}/variants/bowtie2" },
                    mode: 'copy',
                    pattern: "*.bam",
                    enabled: params.skip_markduplicates
                ]
            }

            withName: 'NFCORE_VIRALRECON:ILLUMINA:PRIMER_TRIM_IVAR:BAM_SORT_SAMTOOLS:SAMTOOLS_INDEX' {
                publishDir = [
                    path: { "${params.outdir}/variants/bowtie2" },
                    mode: 'copy',
                    pattern: "*.bai",
                    enabled: params.skip_markduplicates
                ]
            }

            withName: 'NFCORE_VIRALRECON:ILLUMINA:PRIMER_TRIM_IVAR:BAM_SORT_SAMTOOLS:BAM_STATS_SAMTOOLS:.*' {
                publishDir = [
                    path: { "${params.outdir}/variants/bowtie2/samtools_stats" },
                    mode: 'copy',
                    pattern: "*.{stats,flagstat,idxstats}"
                ]
            }
        }
    }

    if (!params.skip_markduplicates) {
        process {
            withName: '.*:MARK_DUPLICATES_PICARD:PICARD_MARKDUPLICATES' {
                ext.args = [
                    'ASSUME_SORTED=true VALIDATION_STRINGENCY=LENIENT TMP_DIR=tmp',
                    params.filter_duplicates ? 'REMOVE_DUPLICATES=true' : ''
                ].join(' ').trim()
                ext.prefix = { "${meta.id}.markduplicates.sorted" }
                publishDir = [
                    [
                        path: { "${params.outdir}/variants/bowtie2/picard_metrics" },
                        mode: 'copy',
                        pattern: '*metrics.txt'
                    ],
                    [
                        path: { "${params.outdir}/variants/bowtie2" },
                        mode: 'copy',
                        pattern: '*.bam'
                    ]
                ]
            }

            withName: '.*:MARK_DUPLICATES_PICARD:SAMTOOLS_INDEX' {
                ext.prefix = { "${meta.id}.markduplicates.sorted" }
                publishDir = [
                    path: { "${params.outdir}/variants/bowtie2" },
                    mode: 'copy',
                    pattern: '*.bai'
                ]
            }

            withName: '.*:MARK_DUPLICATES_PICARD:BAM_STATS_SAMTOOLS:.*' {
                publishDir = [
                    path: { "${params.outdir}/variants/bowtie2/samtools_stats" },
                    mode: 'copy',
                    pattern: '*.{stats,flagstat,idxstats}'
                ]
            }
        }
    }

    if (!params.skip_mosdepth) {
        process {
            withName: COLLAPSE_PRIMERS {
                publishDir = [
                    path: { "${params.outdir}/genome" },
                    mode: 'copy',
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    enabled: params.save_reference
                ]
            }

            withName: MOSDEPTH_GENOME {
                ext.args = '--fast-mode'
                publishDir = [
                    path: { "${params.outdir}/variants/bowtie2/mosdepth/genome" },
                    mode: 'copy',
                    pattern: "*.{summary.txt}"
                ]
            }

            withName: PLOT_MOSDEPTH_REGIONS_GENOME {
                ext.args = '--input_suffix .regions.bed.gz'
                publishDir = [
                    path: { "${params.outdir}/variants/bowtie2/mosdepth/genome" },
                    mode: 'copy',
                    pattern: "*.{tsv,pdf}"
                ]
            }

            withName: MOSDEPTH_AMPLICON {
                ext.args = '--fast-mode --use-median --thresholds 0,1,10,50,100,500'
                publishDir = [
                    path: { "${params.outdir}/variants/bowtie2/mosdepth/amplicon" },
                    mode: 'copy',
                    pattern: "*.{summary.txt}"
                ]
            }

            withName: PLOT_MOSDEPTH_REGIONS_AMPLICON {
                ext.args = '--input_suffix .regions.bed.gz'
                publishDir = [
                    path: { "${params.outdir}/variants/bowtie2/mosdepth/amplicon" },
                    mode: 'copy',
                    pattern: "*.{tsv,pdf}"
                ]
            }
        }
    }

    if (!params.skip_pangolin) {
        if ('ivar' in callers) {
            process {
                withName: 'NFCORE_VIRALRECON:ILLUMINA:VARIANTS_IVAR:PANGOLIN' {
                    publishDir = [
                        path: { "${params.outdir}/variants/ivar/pangolin" },
                        mode: 'copy',
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                    ]
                }
            }
        }

        if ('bcftools' in callers) {
            process {
                withName: 'NFCORE_VIRALRECON:ILLUMINA:VARIANTS_BCFTOOLS:PANGOLIN' {
                    publishDir = [
                        path: { "${params.outdir}/variants/bcftools/pangolin" },
                        mode: 'copy',
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                    ]
                }
            }
        }
    }

    if (!params.skip_nextclade) {
        if ('ivar' in callers) {
            process {
                withName: 'NFCORE_VIRALRECON:ILLUMINA:VARIANTS_IVAR:NEXTCLADE' {
                    publishDir = [
                        path: { "${params.outdir}/variants/ivar/nextclade" },
                        mode: 'copy',
                        pattern: "*.{csv}"
                    ]
                }
            }
        }

        if ('bcftools' in callers) {
            process {
                withName: 'NFCORE_VIRALRECON:ILLUMINA:VARIANTS_BCFTOOLS:NEXTCLADE' {
                    publishDir = [
                        path: { "${params.outdir}/variants/bcftools/nextclade" },
                        mode: 'copy',
                        pattern: "*.{csv}"
                    ]
                }
            }
        }
    }

    if (!params.skip_variants_quast) {
        if ('ivar' in callers) {
            process {
                withName: 'NFCORE_VIRALRECON:ILLUMINA:VARIANTS_IVAR:QUAST' {
                    publishDir = [
                        path: { "${params.outdir}/variants/ivar" },
                        mode: 'copy',
                        pattern: "quast"
                    ]
                }
            }
        }

        if ('bcftools' in callers) {
            process {
                withName: 'NFCORE_VIRALRECON:ILLUMINA:VARIANTS_BCFTOOLS:QUAST' {
                    publishDir = [
                        path: { "${params.outdir}/variants/bcftools" },
                        mode: 'copy',
                        pattern: "quast"
                    ]
                }
            }
        }
    }

    if (!params.skip_asciigenome) {
        process {
            withName: CUSTOM_GETCHROMSIZES {
                publishDir = [
                    path: { "${params.outdir}/genome" },
                    mode: 'copy',
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    enabled: params.save_reference
                ]
            }
        }

        if ('ivar' in callers) {
            process {
                withName: 'NFCORE_VIRALRECON:ILLUMINA:VARIANTS_IVAR:ASCIIGENOME' {
                    publishDir = [
                        path: { "${params.outdir}/variants/ivar/asciigenome/${meta.id}" },
                        mode: 'copy',
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                    ]
                }
            }
        }

        if ('bcftools' in callers) {
            process {
                withName: 'NFCORE_VIRALRECON:ILLUMINA:VARIANTS_BCFTOOLS:ASCIIGENOME' {
                    publishDir = [
                        path: { "${params.outdir}/variants/bcftools/asciigenome/${meta.id}" },
                        mode: 'copy',
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                    ]
                }
            }
        }
    }

    if (!params.skip_snpeff) {
        process {
            withName: SNPEFF_BUILD {
                publishDir = [
                    path: { "${params.outdir}/genome" },
                    mode: 'copy',
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    enabled: params.save_reference
                ]
            }
        }

        if ('ivar' in callers) {
            process {
                withName: 'NFCORE_VIRALRECON:ILLUMINA:VARIANTS_IVAR:SNPEFF_SNPSIFT:SNPEFF_ANN' {
                    publishDir = [
                        path: { "${params.outdir}/variants/ivar/snpeff" },
                        mode: 'copy',
                        pattern: "*.{csv,txt,html}"
                    ]
                }

                withName: 'NFCORE_VIRALRECON:ILLUMINA:VARIANTS_IVAR:SNPEFF_SNPSIFT:VCF_BGZIP_TABIX_STATS:TABIX_BGZIP' {
                    ext.prefix = { "${meta.id}.snpeff" }
                    publishDir = [
                        path: { "${params.outdir}/variants/ivar/snpeff" },
                        mode: 'copy',
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                    ]
                }

                withName: 'NFCORE_VIRALRECON:ILLUMINA:VARIANTS_IVAR:SNPEFF_SNPSIFT:VCF_BGZIP_TABIX_STATS:VCF_TABIX_STATS:TABIX_TABIX' {
                    ext.args = '-p vcf -f'
                    publishDir = [
                        path: { "${params.outdir}/variants/ivar/snpeff" },
                        mode: 'copy',
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                    ]
                }

                withName: 'NFCORE_VIRALRECON:ILLUMINA:VARIANTS_IVAR:SNPEFF_SNPSIFT:VCF_BGZIP_TABIX_STATS:VCF_TABIX_STATS:BCFTOOLS_STATS' {
                    ext.prefix = { "${meta.id}.snpeff" }
                    publishDir = [
                        path: { "${params.outdir}/variants/ivar/snpeff/bcftools_stats" },
                        mode: 'copy',
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                    ]
                }

                withName: 'NFCORE_VIRALRECON:ILLUMINA:VARIANTS_IVAR:SNPEFF_SNPSIFT:SNPSIFT_EXTRACTFIELDS' {
                    publishDir = [
                        path: { "${params.outdir}/variants/ivar/snpeff" },
                        mode: 'copy',
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                    ]
                }
            }
        }

        if ('bcftools' in callers) {
            process {
                withName: 'NFCORE_VIRALRECON:ILLUMINA:VARIANTS_BCFTOOLS:SNPEFF_SNPSIFT:SNPEFF_ANN' {
                    publishDir = [
                        path: { "${params.outdir}/variants/bcftools/snpeff" },
                        mode: 'copy',
                        pattern: "*.{csv,txt,html}"
                    ]
                }

                withName: 'NFCORE_VIRALRECON:ILLUMINA:VARIANTS_BCFTOOLS:SNPEFF_SNPSIFT:VCF_BGZIP_TABIX_STATS:TABIX_BGZIP' {
                    ext.prefix = { "${meta.id}.snpeff" }
                    publishDir = [
                        path: { "${params.outdir}/variants/bcftools/snpeff" },
                        mode: 'copy',
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                    ]
                }

                withName: 'NFCORE_VIRALRECON:ILLUMINA:VARIANTS_BCFTOOLS:SNPEFF_SNPSIFT:VCF_BGZIP_TABIX_STATS:VCF_TABIX_STATS:TABIX_TABIX' {
                    ext.args = '-p vcf -f'
                    publishDir = [
                        path: { "${params.outdir}/variants/bcftools/snpeff" },
                        mode: 'copy',
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                    ]
                }

                withName: 'NFCORE_VIRALRECON:ILLUMINA:VARIANTS_BCFTOOLS:SNPEFF_SNPSIFT:VCF_BGZIP_TABIX_STATS:VCF_TABIX_STATS:BCFTOOLS_STATS' {
                    ext.prefix = { "${meta.id}.snpeff" }
                    publishDir = [
                        path: { "${params.outdir}/variants/bcftools/snpeff/bcftools_stats" },
                        mode: 'copy',
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                    ]
                }

                withName: 'NFCORE_VIRALRECON:ILLUMINA:VARIANTS_BCFTOOLS:SNPEFF_SNPSIFT:SNPSIFT_EXTRACTFIELDS' {
                    publishDir = [
                        path: { "${params.outdir}/variants/bcftools/snpeff" },
                        mode: 'copy',
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                    ]
                }
            }
        }
    }
}

if (!params.skip_multiqc) {
    process {
        withName: MULTIQC {
            ext.args = params.multiqc_title ? "--title \"$params.multiqc_title\"" : ''
            publishDir = [
                [
                    path: { "${params.outdir}/multiqc" },
                    mode: 'copy',
                    pattern: 'multiqc*'
                ],
                [
                    path: { "${params.outdir}/multiqc" },
                    mode: 'copy',
                    pattern: '*variants_metrics_mqc.csv',
                    enabled: !params.skip_variants
                ],
                [
                    path: { "${params.outdir}/multiqc" },
                    mode: 'copy',
                    pattern: '*assembly_metrics_mqc.csv',
                    enabled: !params.skip_assembly
                ]
            ]
        }
    }
}

if (!params.skip_assembly) {
    if (!params.skip_cutadapt) {
        process {
            withName: BEDTOOLS_GETFASTA {
                ext.args = '-s -nameOnly'
                publishDir = [
                    path: { "${params.outdir}/genome" },
                    mode: 'copy',
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    enabled: params.save_reference
                ]
            }
        }
    }

    if (!params.skip_blast) {
        process {
            withName: BLAST_MAKEBLASTDB {
                ext.args = '-parse_seqids -dbtype nucl'
                publishDir = [
                    path: { "${params.outdir}/genome" },
                    mode: 'copy',
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    enabled: params.save_reference
                ]
            }
        }
    }
}

//
// TODO
//

if (!params.skip_variants) {
    process {
        withName: BCFTOOLS_MPILEUP {
            ext.args  = '--count-orphans --no-BAQ --max-depth 0 --min-BQ 20 --annotate FORMAT/AD,FORMAT/ADF,FORMAT/ADR,FORMAT/DP,FORMAT/SP,INFO/AD,INFO/ADF,INFO/ADR'
            ext.args2 = '--ploidy 1 --keep-alts --keep-masked-ref --multiallelic-caller --variants-only'
            ext.args3 = "--include 'INFO/DP>=10'"
        }

        withName: BEDTOOLS_GENOMECOV {
            ext.args   = "-bga | awk '\$4 < 10'"
            ext.prefix = { "${meta.id}.coverage" }
        }

        withName: BEDTOOLS_MERGE {
            ext.prefix = { "${meta.id}.coverage.merged" }
        }

        withName: BCFTOOLS_CONSENSUS {
            ext.prefix = { "${meta.id}.consensus" }
        }
    }
}
