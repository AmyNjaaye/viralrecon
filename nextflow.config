/*
 * -------------------------------------------------
 *  nf-core/viralrecon Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */


// Global default params, used in configs
params {

  // Input options
  input                      = ''
  public_data_ids            = ''
  protocol                   = 'metagenomic'
  platform                   = 'illumina'
  save_merged_fastq          = false
  skip_sra_fastq_download    = false

  // Reference genomes
  genome                     = ''
  amplicon_fasta             = ''
  amplicon_bed               = ''
  save_reference             = false

  // Read Trimming
  cut_mean_quality           = 30
  qualified_quality_phred    = 30
  unqualified_percent_limit  = 10
  min_trim_length            = 50
  skip_adapter_trimming      = false
  skip_amplicon_trimming     = false
  save_trimmed               = false

  // Kraken2
  kraken2_db                 = 'https://zenodo.org/record/3738199/files/kraken2_human.tar.gz'
  kraken2_db_name            = 'human'
  kraken2_use_ftp            = false
  save_kraken2_fastq         = false
  skip_kraken2               = false

  // Variant calling
  callers                    = 'varscan2,ivar,bcftools'
  min_mapped_reads           = 1000
  ivar_trim_noprimer         = false
  ivar_trim_min_len          = 20
  ivar_trim_min_qual         = 20
  ivar_trim_window_width     = 4
  filter_dups                = false
  filter_unmapped            = false
  mpileup_depth              = 0
  min_base_qual              = 20
  min_coverage               = 10
  min_allele_freq            = 0.25
  max_allele_freq            = 0.75
  varscan2_strand_filter     = true
  amplicon_left_suffix       = '_LEFT'
  amplicon_right_suffix      = '_RIGHT'
  save_align_intermeds       = false
  save_mpileup               = false
  skip_markduplicates        = false
  skip_picard_metrics        = false
  skip_mosdepth              = false
  skip_snpeff                = false
  skip_variants_quast        = false
  skip_variants              = false

  // De novo assembly
  assemblers                 = 'spades,metaspades,unicycler,minia'
  minia_kmer                 = 31
  skip_blast                 = false
  skip_abacas                = false
  skip_plasmidid             = false
  skip_vg                    = false
  skip_assembly_quast        = false
  skip_assembly              = false

  // QC
  skip_fastqc                = false
  skip_multiqc               = false

  // MultiQC
  multiqc_config             = ''
  multiqc_title              = ''
  max_multiqc_email_size     = '25.MB'
  skip_multiqc               = false

  // Boilerplate options
  outdir                     = './results'
  tracedir                   = "${params.outdir}/pipeline_info"
  publish_dir_mode           = 'copy'
  email                      = ''
  email_on_fail              = ''
  plaintext_email            = false
  monochrome_logs            = false
  help                       = false
  enable_conda               = false
  singularity_pull_docker_container = false
  
  // Config options
  custom_config_version      = 'master'
  custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  hostnames                  = [:]
  config_profile_description = ''
  config_profile_contact     = ''
  config_profile_url         = ''

  // Max resource options
  // Defaults only, expecting to be overwritten
  max_memory                 = '128.GB'
  max_cpus                   = 16
  max_time                   = '240.h'

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Load nf-core custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load nf-core/viralrecon custom config
try {
  includeConfig "${params.custom_config_base}/pipeline/viralrecon.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config/viralrecon profiles: ${params.custom_config_base}/pipeline/viralrecon.config")
}

profiles {
  conda { params.enable_conda = true              }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker {
    docker.enabled = true
    // Avoid this error:
    //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
    // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
    // once this is established and works well, nextflow might implement this behavior as new default.
    docker.runOptions = '-u \$(id -u):\$(id -g)'
  }
  singularity {
    singularity.enabled    = true
    singularity.autoMounts = true
  }
  podman {
    podman.enabled = true
  }
  test            { includeConfig 'conf/test.config'            }
  test_sra        { includeConfig 'conf/test_sra.config'        }
  test_sispa      { includeConfig 'conf/test_sispa.config'      }
  test_full       { includeConfig 'conf/test_full.config'       }
  test_full_sispa { includeConfig 'conf/test_full_sispa.config' }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
  R_PROFILE_USER   = "/.Rprofile"
  R_ENVIRON_USER   = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file    = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file    = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file    = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file    = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name            = 'nf-core/viralrecon'
  author          = 'Sarai Varona and Sara Monzon'
  homePage        = 'https://github.com/nf-core/viralrecon'
  description     = 'Assembly and intrahost/low-frequency variant calling for viral samples'
  mainScript      = 'main.nf'
  nextflowVersion = '!>=20.11.0-edge'
  version         = '1.2.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
