#!/usr/bin/env nextflow
/*
========================================================================================
                         nf-core/viralrecon
========================================================================================
 nf-core/viralrecon Analysis Pipeline.
 #### Homepage / Documentation
 https://github.com/nf-core/viralrecon
----------------------------------------------------------------------------------------
*/

def helpMessage() {
    // TODO nf-core: Add to this help message with new command line parameters
    log.info nfcoreHeader()
    log.info"""

    Usage:

    The typical command for running the pipeline is as follows:

    nextflow run nf-core/viralrecon --input samplesheet.csv --host_genome 'hg38' --viral_genome 'NC_045512.2' -profile docker

    Mandatory arguments
      --input [file]                  Comma-separated file containing information about the samples in the experiment (see docs/usage.md)
      --host_fasta [file]             Path to Fasta reference for host genome. Not mandatory when using reference in iGenomes config via --host_genome
      --viral_fasta [file]            Path to Fasta reference for viral genome. Not mandatory when using reference in iGenomes config via --viral_genome
      -profile [str]                  Configuration profile to use. Can use multiple (comma separated)
                                      Available: conda, docker, singularity, test, awsbatch, <institute> and more

    Generic
      --protocol [str]                Specifies the type of protocol used for sequencing i.e. "metagenomic" or "amplicon". (Default: "metagenomic")

    References                        If not specified in the configuration file or you wish to overwrite any of the references
      --host_genome [str]             Name of iGenomes reference for host genome
      --host_index [file]             Full path to directory containing Bowtie2 index including base name for host genome i.e. /path/to/index/genome.fa
      --host_kraken2_db [file]        Full path to Kraken2 database built from host genome
      --host_kraken2_name [str]       Name of host genome for building Kraken2 database (Default: "human")

      --viral_genome [str]            Name of iGenomes reference for viral genome
      --viral_index [file]            Full path to directory containing Bowtie2 index including base name for viral genome i.e. /path/to/index/genome.fa
      --viral_blast_db [file]         Full path to Blast database for viral genome
      --viral_gff [file]              Full path to viral gff annotation file

      --save_reference [bool]         If generated by the pipeline save the Bowtie2 indices in the results directory (Default: false)

    Trimming
      --skip_trimming [bool]          Skip the adapter trimming step (Default: false)
      --save_trimmed [bool]           Save the trimmed FastQ files in the results directory (Default: false)

    Alignments
      --save_kraken2_fastq [bool]     Save the host and viral fastq files in the results directory (Default: false)
      --save_align_intermeds [bool]   Save the intermediate BAM files from the alignment step (Default: false)

    De novo assembly
      --skip_assembly [bool]          Skip assembly steps in the pipeline

    Variant calling
      --skip_variants [bool]          Skip variant calling steps in the pipeline

    QC
      --skip_qc [bool]                Skip all QC steps apart from MultiQC (Default: false)
      --skip_fastqc [bool]            Skip FastQC (Default: false)
      --skip_multiqc [bool]           Skip MultiQC (Default: false)

    Other options:
      --outdir [file]                 The output directory where the results will be saved
      --email [email]                 Set this parameter to your e-mail address to get a summary e-mail with details of the run sent to you when the workflow exits
      --email_on_fail [email]         Same as --email, except only send mail if the workflow is not successful
      --max_multiqc_email_size [str]  Theshold size for MultiQC report to be attached in notification email. If file generated by pipeline exceeds the threshold, it will not be attached (Default: 25MB)
      -name [str]                     Name for the pipeline run. If not specified, Nextflow will automatically generate a random mnemonic

    AWSBatch options:
      --awsqueue [str]                The AWSBatch JobQueue that needs to be set when running on AWSBatch
      --awsregion [str]               The AWS Region for your AWS Batch job to run on
      --awscli [str]                  Path to the AWS CLI tool
    """.stripIndent()
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                SET UP CONFIGURATION VARIABLES                       -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

// Show help message
if (params.help) {
    helpMessage()
    exit 0
}

// Has the run name been specified by the user?
// this has the bonus effect of catching both -name and --name
custom_runName = params.name
if (!(workflow.runName ==~ /[a-z]+_[a-z]+/)) {
    custom_runName = workflow.runName
}

////////////////////////////////////////////////////
/* --          VALIDATE INPUTS                 -- */
////////////////////////////////////////////////////

if (params.input) { ch_input = file(params.input, checkIfExists: true) } else { exit 1, "Samplesheet file not specified!" }

if (params.protocol != 'metagenomic' && params.protocol != 'amplicon') {
    exit 1, "Invalid protocol option: ${params.protocol}. Valid options: 'metagenomic' or 'amplicon'"
}

// Host reference files
if (params.genomes && params.host_genome && !params.genomes.containsKey(params.host_genome)) {
   exit 1, "The provided genome '${params.host_genome}' is not available in the iGenomes file. Currently the available genomes are ${params.genomes.keySet().join(", ")}"
}
params.host_fasta = params.host_genome ? params.genomes[ params.host_genome ].fasta ?: false : false
params.host_index = params.host_genome ? params.genomes[ params.host_genome ].bowtie2 ?: false : false

if (params.host_fasta) {
    lastPath = params.host_fasta.lastIndexOf(File.separator)
    lastExt = params.host_fasta.lastIndexOf(".")
    host_index_base = params.host_fasta.substring(lastPath+1,lastExt)
    ch_host_fasta = file(params.host_fasta, checkIfExists: true)
} else {
    exit 1, "Host fasta file not specified!"
}

if (params.host_index) {
    lastPath = params.host_index.lastIndexOf(File.separator)
    host_index_dir = params.host_index.substring(0,lastPath+1)
    host_index_base = params.host_index.substring(lastPath+1)
    Channel
        .fromPath(host_index_dir, checkIfExists: true)
        .set { ch_host_index }
}

if (params.host_kraken2_db) { ch_host_kraken2_db = Channel.fromPath(params.host_kraken2_db, checkIfExists: true) } else { ch_host_kraken2_db = Channel.empty() }

// Viral reference files
if (params.genomes && params.viral_genome && !params.genomes.containsKey(params.viral_genome)) {
   exit 1, "The provided genome '${params.viral_genome}' is not available in the iGenomes file. Currently the available genomes are ${params.genomes.keySet().join(", ")}"
}
params.viral_fasta = params.viral_genome ? params.genomes[ params.viral_genome ].fasta ?: false : false
params.viral_index = params.viral_genome ? params.genomes[ params.viral_genome ].bowtie2 ?: false : false

if (params.viral_fasta) {
    lastPath = params.viral_fasta.lastIndexOf(File.separator)
    lastExt = params.host_fasta.lastIndexOf(".")
    viral_index_base = params.viral_fasta.substring(lastPath+1,lastExt)
    ch_viral_fasta = file(params.viral_fasta, checkIfExists: true)
} else {
    exit 1, "Viral fasta file not specified!"
}

if (params.viral_index) {
    lastPath = params.viral_index.lastIndexOf(File.separator)
    viral_index_dir = params.viral_index.substring(0,lastPath+1)
    viral_index_base = params.viral_index.substring(lastPath+1)
    Channel
        .fromPath(viral_index_dir, checkIfExists: true)
        .set { ch_viral_index }
}

if (params.viral_blast_db) { ch_viral_blast_db = file(params.viral_blast_db, checkIfExists: true) }
if (params.viral_gff) { ch_viral_gff = file(params.viral_gff, checkIfExists: true) }

////////////////////////////////////////////////////
/* --          CONFIG FILES                    -- */
////////////////////////////////////////////////////

ch_multiqc_config = file("$baseDir/assets/multiqc_config.yaml", checkIfExists: true)
ch_multiqc_custom_config = params.multiqc_config ? Channel.fromPath(params.multiqc_config, checkIfExists: true) : Channel.empty()
ch_output_docs = file("$baseDir/docs/output.md", checkIfExists: true)

////////////////////////////////////////////////////
/* --                   AWS                    -- */
////////////////////////////////////////////////////

// Check AWS batch settings
if (workflow.profile.contains('awsbatch')) {
    // AWSBatch sanity checking
    if (!params.awsqueue || !params.awsregion) exit 1, "Specify correct --awsqueue and --awsregion parameters on AWSBatch!"
    // Check outdir paths to be S3 buckets if running on AWSBatch
    // related: https://github.com/nextflow-io/nextflow/issues/813
    if (!params.outdir.startsWith('s3:')) exit 1, "Outdir not on S3 - specify S3 Bucket to run on AWSBatch!"
    // Prevent trace files to be stored on S3 since S3 does not support rolling files.
    if (params.tracedir.startsWith('s3:')) exit 1, "Specify a local tracedir or run without trace! S3 cannot be used for tracefiles."
}

////////////////////////////////////////////////////
/* --                FUNCTIONS                 -- */
////////////////////////////////////////////////////

// Function to check if running offline
def isOffline() {
    try {
        return NXF_OFFLINE as Boolean
    }
    catch( Exception e ) {
        return false
    }
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                       HEADER LOG INFO                               -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

// Header log info
log.info nfcoreHeader()
def summary = [:]
if (workflow.revision)            summary['Pipeline Release'] = workflow.revision
summary['Run Name']               = custom_runName ?: workflow.runName
// TODO nf-core: Report custom parameters here
summary['Samplesheet']            = params.input
summary['Protocol']               = params.protocol
summary['Host Genome']            = params.host_genome ?: 'Not supplied'
summary['Host Fasta File']        = params.host_fasta
if (params.host_index)            summary['Host Bowtie2 Index'] = params.host_index
if (params.host_kraken2_db)       summary['Host Kraken2 DB'] = params.host_kraken2_db
summary['Host Kraken2 Name']      = params.host_kraken2_name
summary['Viral Genome']           = params.viral_genome ?: 'Not supplied'
summary['Viral Fasta File']       = params.viral_fasta
if (params.viral_index)           summary['Viral Bowtie2 Index'] = params.viral_index
if (params.viral_blast_db)        summary['Viral Blast DB'] = params.viral_blast_db
if (params.viral_gff)             summary['Viral GFF'] = params.viral_gff
summary['Save Genome Indices']    = params.save_reference ? 'Yes' : 'No'
if (params.skip_trimming)         summary['Skip Trimming'] = 'Yes'
if (params.save_trimmed)          summary['Save Trimmed'] = 'Yes'
if (params.save_kraken2_fastq)    summary['Save Kraken2 FastQ'] = params.save_kraken2_fastq
if (params.save_align_intermeds)  summary['Save Intermeds'] =  'Yes'
if (params.skip_assembly)         summary['Skip De novo Assembly'] =  'Yes'
if (params.skip_variants)         summary['Skip Variant Calling'] =  'Yes'
if (params.skip_qc)               summary['Skip QC'] = 'Yes'
if (params.skip_fastqc)           summary['Skip FastQC'] = 'Yes'
if (params.skip_multiqc)          summary['Skip MultiQC'] = 'Yes'
summary['Max Resources']          = "$params.max_memory memory, $params.max_cpus cpus, $params.max_time time per job"
if (workflow.containerEngine)     summary['Container'] = "$workflow.containerEngine - $workflow.container"
summary['Output dir']             = params.outdir
summary['Publish dir mode']       = params.publish_dir_mode
summary['Launch dir']             = workflow.launchDir
summary['Working dir']            = workflow.workDir
summary['Script dir']             = workflow.projectDir
summary['User']                   = workflow.userName
if (workflow.profile.contains('awsbatch')) {
    summary['AWS Region']         = params.awsregion
    summary['AWS Queue']          = params.awsqueue
    summary['AWS CLI']            = params.awscli
}
summary['Config Profile'] = workflow.profile
if (params.config_profile_description) summary['Config Description'] = params.config_profile_description
if (params.config_profile_contact)     summary['Config Contact']     = params.config_profile_contact
if (params.config_profile_url)         summary['Config URL']         = params.config_profile_url
if (params.email || params.email_on_fail) {
    summary['E-mail Address']     = params.email
    summary['E-mail on failure']  = params.email_on_fail
    summary['MultiQC maxsize']    = params.max_multiqc_email_size
}
log.info summary.collect { k,v -> "${k.padRight(18)}: $v" }.join("\n")
log.info "-\033[2m--------------------------------------------------\033[0m-"

// Check the hostnames against configured profiles
checkHostname()

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                     PARSE DESIGN FILE                               -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

/*
 * PREPROCESSING: Reformat samplesheet and check validitiy
 */
process CHECK_SAMPLESHEET {
    tag "$samplesheet"
    publishDir "${params.outdir}/pipeline_info", mode: params.publish_dir_mode

    input:
    file samplesheet from ch_input

    output:
    file "*.csv" into ch_samplesheet_reformat

    script:  // This script is bundled with the pipeline, in nf-core/viralrecon/bin/
    """
    check_samplesheet.py $samplesheet samplesheet_reformat.csv
    """
}

// Function to get list of [ sample, single_end?, is_sra?, [ fastq_1, fastq_2 ] ]
def validate_input(LinkedHashMap sample) {
    def sample_id = sample.sample_id
    def single_end = sample.single_end.toBoolean()
    def is_sra = sample.is_sra.toBoolean()
    def fastq_1 = sample.fastq_1
    def fastq_2 = sample.fastq_2

    def array = []
    if (!is_sra) {
        if (single_end) {
            array = [ sample_id, single_end, is_sra, [ file(fastq_1, checkIfExists: true) ] ]
        } else {
            array = [ sample_id, single_end, is_sra, [ file(fastq_1, checkIfExists: true), file(fastq_2, checkIfExists: true) ] ]
        }
    } else {
        array = [ sample_id, single_end, is_sra, [ ] ]
    }

    return array
}

/*
 * Create channels for input fastq files
 */
 ch_samplesheet_reformat
    .splitCsv(header:true, sep:',')
    .map { validate_input(it) }
    .into { ch_reads_no_sra;
            ch_reads_sra }

ch_reads_no_sra_filt = ch_reads_no_sra
                        .filter {
                            it[2] != true
                        }

/*
ch_samplesheet_reformat
    .splitCsv(header:true, sep:',')
    .map { validate_input(it) }
    .into { ch_reads_fastqc;
            ch_reads_trimmomatic;
            ch_reads_kraken2;
            ch_reads_bowtie2;
            ch_reads_no_sra;
            ch_reads_sra }
*/

// Split channels between the one that have the files in the disk and those in that should be downloaded from SRA

/*
 * Download data using SRA ids using fromSRA
 */
// Get list of SRA ids that should be downloaded
sra_ids_list = ch_reads_sra
                .filter {
                    it[2] == true
                }.map {
                    id = it[0].split("_")[0]
                    id
                }.toList().val

SRA_pointers = Channel.fromSRA( sra_ids_list, apiKey: '5141bbaeaeea4edfabacbc1402ae8084ae0a', cache: false )

/*
    if: flag==null
    """
    """
    else:
    """
    """
*/
process dw_fastq_sra {

    input:
    set val(id), file(reads) from SRA_pointers

    output:
    set val(id), stdout, val('true'), file(reads) into ch_reads_sra_dw

    """
    i=`ls $reads | wc -l`
    echo \$i > text.txt
    if [[ \$i == 1 ]]
    then
        printf 'true'
    else
        printf 'false'
    fi

    # filename=`printf ${reads[1].baseName}`
    # extension="\${filename##*.}"
    # filename="\${filename%.*}"
    # mv "T1_\${filename}_v1" > text.txt
    """

    // fastq_info $reads
}
//ch_reads_sra_dw.view()
//return
ch_reads_sra_dw_to_mix = ch_reads_sra_dw.map {
                                            [ it[0] + "_T1", it[1].toBoolean(), it[2], it[3] ]
                                        }

ch_reads_no_sra_filt.mix ( ch_reads_sra_dw_to_mix )
                    .into {
                        ch_reads_fastqc;
                        ch_reads_trimmomatic;
                        ch_reads_kraken2;
                        ch_reads_bowtie2
                    }

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                     PREPARE REFERENCE FILES                         -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

/*
 * PREPROCESSING: Build Host Bowtie2 index
 */
if (!params.host_index) {
    process BOWTIE2_INDEX_HOST {
        tag "$fasta"
        label 'process_high'
        publishDir path: { params.save_reference ? "${params.outdir}/genome" : params.outdir },
            saveAs: { params.save_reference ? it : null }, mode: params.publish_dir_mode

        input:
        file fasta from ch_host_fasta

        output:
        file "Bowtie2IndexHost" into ch_host_index

        script:
        """
        bowtie2-build \\
            --seed 1 \\
            --threads $task.cpus \\
            $fasta \\
            $host_index_base
        mkdir Bowtie2IndexHost && mv ${host_index_base}* Bowtie2IndexHost
        """
    }
}

/*
 * PREPROCESSING: Build Viral Bowtie2 index
 */
if (!params.viral_index) {
    process BOWTIE2_INDEX_VIRAL {
        tag "$fasta"
        label 'process_medium'
        publishDir path: { params.save_reference ? "${params.outdir}/genome" : params.outdir },
            saveAs: { params.save_reference ? it : null }, mode: params.publish_dir_mode

        input:
        file fasta from ch_viral_fasta

        output:
        file "Bowtie2IndexViral" into ch_viral_index

        script:
        """
        bowtie2-build \\
            --seed 1 \\
            --threads $task.cpus \\
            $fasta \\
            $viral_index_base
        mkdir Bowtie2IndexViral && mv ${viral_index_base}* Bowtie2IndexViral
        """
    }
}

/*
 * PREPROCESSING: Build Host Kraken2 database
 */
// NEED TO FIND A WAY OF NOT RUNNING THIS PROCESS FOR TEST-DATA
// OR PROVIDING A MUCH SMALLER DATABASE ON TEST-DATASETS IN ITS PLACE
if (!isOffline()) {
    if (!params.host_kraken2_db && !workflow.profile.contains('test')) {
        process KRAKEN2_DB_HOST {
            tag "$db"
            label 'process_high'
            publishDir path: { params.save_reference ? "${params.outdir}/genome" : params.outdir },
                saveAs: { params.save_reference ? it : null }, mode: params.publish_dir_mode

            output:
            file "$db" into ch_host_kraken2_db

            script:
            db = "kraken2_${params.host_kraken2_name}"
            """
            kraken2-build --db $db --threads $task.cpus --download-taxonomy
            kraken2-build --db $db --threads $task.cpus --download-library $params.host_kraken2_name
            kraken2-build --db $db --threads $task.cpus --build

            cd $db
            if [ -d "taxonomy" ]; then rm -rf taxonomy; fi
            if [ -d "library" ]; then rm -rf library; fi
            if [ -f "seqid2taxid.map" ]; then rm seqid2taxid.map; fi
            """
        }
    }
} else {
    exit 1, "NXF_OFFLINE=true or -offline has been set so cannot download files required to build Kraken2 database!"
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                     DOWNLOAD SRA FILES                              -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

// GET SRA FASTQ FILES HERE
// MERGE WITH ORIGINAL CHANNELS BEFORE PASSING TO NEXT STEPS

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                        FASTQ QC                                     -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

/*
 * STEP 1: FastQC before trimming
 */
process FASTQC_RAW {
    tag "$sample"
    label 'process_medium'
    publishDir "${params.outdir}/fastqc", mode: params.publish_dir_mode,
        saveAs: { filename ->
                      filename.endsWith(".zip") ? "zips/$filename" : "$filename"
                }

    when:
    !params.skip_fastqc && !params.skip_qc

    input:
    set val(sample), val(single_end), val(is_sra), file(reads) from ch_reads_fastqc

    output:
    file "*.{zip,html}" into ch_fastqc_reports_mqc

    script:
    // Added soft-links to original fastqs for consistent naming in MultiQC
    if (single_end) {
        """
        echo "I was in single end"
        [ ! -f  ${sample}.fastq.gz ] && ln -s $reads ${sample}.fastq.gz
        fastqc -q -t $task.cpus ${sample}.fastq.gz
        """
    } else {
        """
        echo "I was not in double end"
        [ ! -f  ${sample}_1.fastq.gz ] && ln -s ${reads[0]} ${sample}_1.fastq.gz
        [ ! -f  ${sample}_2.fastq.gz ] && ln -s ${reads[1]} ${sample}_2.fastq.gz
        fastqc -q -t $task.cpus ${sample}_1.fastq.gz
        fastqc -q -t $task.cpus ${sample}_2.fastq.gz
        """
    }
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                        ADAPTER TRIMMING                             -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

/*
* STEP 2: Adapter trimming
*/

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                        FILTER HOST READS                            -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

/*
* STEP 3: Remove host reads with Kraken2
*/
// CHECK IF USER-PROVIDED DATABASE IS ZIPPED OR IN A TAR ARCHIVE
process KRAKEN2 {
    tag "$db"
    label 'process_high'
    publishDir "${params.outdir}/kraken2", mode: params.publish_dir_mode,
            saveAs: { filename ->
                          if (filename.endsWith(".txt")) filename
                          else params.save_kraken2_fastq ? filename : null
                    }

    when:
    !workflow.profile.contains('test')

    input:
    set val(sample), val(single_end), val(is_sra), file(reads) from ch_reads_kraken2
    file db from ch_host_kraken2_db.collect()

    output:
    set val(sample), val(single_end), val(is_sra), file("*.viral*") into ch_kraken2_viral_reads
    set val(sample), val(single_end), val(is_sra), file("*.host*") into ch_kraken2_host_reads
    file "*.report.txt" into ch_kraken2_report

    script:
    pe = single_end ? "" : "--paired"
    classified = single_end ? "${sample}.viral.fastq" : "${sample}.viral#.fastq"
    unclassified = single_end ? "${sample}.host.fastq" : "${sample}.host#.fastq"
    """
    kraken2 \\
        --db $db \\
        --threads $task.cpus \\
        --unclassified-out $unclassified \\
        --classified-out $classified \\
        --report ${sample}.kraken2.report.txt \\
        $pe \\
        --gzip-compressed \\
        $reads
    gzip *.fastq
    """
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                        ALIGN                                        -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

// /*
//  * STEP 3.1: Map Illumina read(s) with bwa mem
//  */
// process BWA_MEM {
//     tag "$sample"
//     label 'process_high'
//     if (params.save_align_intermeds) {
//         publishDir "${params.outdir}/bwa", mode: params.publish_dir_mode
//     }
//
//     when:
//     !long_reads
//
//     input:
//     set val(sample), val(single_end), val(long_reads), file(reads) from ch_reads_bwa
//     file index from ch_bwa_index.collect()
//
//     output:
//     set val(sample), val(single_end), val(long_reads), file("*.bam") into ch_bwa_bam
//
//     script:
//     rg = "\'@RG\\tID:${sample}\\tSM:${sample.split('_')[0..-2].join('_')}\\tPL:ILLUMINA\\tLB:${sample}\\tPU:1\'"
//     """
//     bwa mem \\
//         -t $task.cpus \\
//         -M \\
//         -R $rg \\
//         ${index}/${bwa_base} \\
//         $reads \\
//         | samtools view -@ $task.cpus -b -h -F 0x0100 -O BAM -o ${sample}.bam -
//     """
// }

// /*
//  * STEP 3.2: Convert BAM to coordinate sorted BAM
//  */
// process SORT_BAM {
//     tag "$sample"
//     label 'process_medium'
//     publishDir "${params.outdir}/${aligner}", mode: params.publish_dir_mode,
//         saveAs: { filename ->
//                       if (params.save_align_intermeds) {
//                           if (filename.endsWith(".flagstat")) "samtools_stats/$filename"
//                           else if (filename.endsWith(".idxstats")) "samtools_stats/$filename"
//                           else if (filename.endsWith(".stats")) "samtools_stats/$filename"
//                           else filename
//                       }
//                 }
//
//     input:
//     set val(sample), val(single_end), val(long_reads), file(bam) from ch_bwa_bam.concat(ch_minimap2_bam)
//
//     output:
//     set val(sample), val(single_end), val(long_reads), file("*.sorted.{bam,bam.bai}") into ch_sort_bam
//     file "*.{flagstat,idxstats,stats}" into ch_sort_bam_flagstat_mqc
//
//     script:
//     aligner = long_reads ? "minimap2" : "bwa"
//     """
//     samtools sort -@ $task.cpus -o ${sample}.sorted.bam -T $sample $bam
//     samtools index ${sample}.sorted.bam
//     samtools flagstat ${sample}.sorted.bam > ${sample}.sorted.bam.flagstat
//     samtools idxstats ${sample}.sorted.bam > ${sample}.sorted.bam.idxstats
//     samtools stats ${sample}.sorted.bam > ${sample}.sorted.bam.stats
//     """
// }

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                        BAM POST-ANALYSIS                            -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////




///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                        DENOVO ASSEMBLY                              -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////






///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                        VARIANT CALLING                              -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                          MULTIQC                                    -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

Channel.from(summary.collect{ [it.key, it.value] })
    .map { k,v -> "<dt>$k</dt><dd><samp>${v ?: '<span style=\"color:#999999;\">N/A</a>'}</samp></dd>" }
    .reduce { a, b -> return [a, b].join("\n            ") }
    .map { x -> """
    id: 'nf-core-viralrecon-summary'
    description: " - this information is collected when the pipeline is started."
    section_name: 'nf-core/viralrecon Workflow Summary'
    section_href: 'https://github.com/nf-core/viralrecon'
    plot_type: 'html'
    data: |
        <dl class=\"dl-horizontal\">
            $x
        </dl>
    """.stripIndent() }
    .set { ch_workflow_summary }

/*
 * Parse software version numbers
 */
process get_software_versions {
    publishDir "${params.outdir}/pipeline_info", mode: params.publish_dir_mode,
        saveAs: { filename ->
                      if (filename.indexOf(".csv") > 0) filename
                      else null
                }

    output:
    file 'software_versions_mqc.yaml' into ch_software_versions_yaml
    file "software_versions.csv"

    script:
    // TODO nf-core: Get all tools to print their version number here
    """
    echo $workflow.manifest.version > v_pipeline.txt
    echo $workflow.nextflow.version > v_nextflow.txt
    fastqc --version > v_fastqc.txt
    trimmomatic -version > v_trimmomatic.txt
    bowtie2 --version > v_bowtie2.txt
    kraken2 --version > v_kraken2.txt
    samtools --version > v_samtools.txt
    bedtools --version > v_bedtools.txt
    picard MarkDuplicates --version &> v_picard.txt  || true
    preseq &> v_preseq.txt
    echo \$(R --version 2>&1) > v_R.txt
    multiqc --version > v_multiqc.txt
    scrape_software_versions.py &> software_versions_mqc.yaml
    """
}

/*
* STEP 10: MultiQC
*/
process MULTIQC {
    publishDir "${params.outdir}/multiqc", mode: params.publish_dir_mode

    input:
    file (multiqc_config) from ch_multiqc_config
    file (mqc_custom_config) from ch_multiqc_custom_config.collect().ifEmpty([])
    // TODO nf-core: Add in log files from your new processes for MultiQC to find!
    file ('fastqc/*') from ch_fastqc_reports_mqc.collect().ifEmpty([])
    file ('software_versions/*') from ch_software_versions_yaml.collect()
    file workflow_summary from ch_workflow_summary.collectFile(name: "workflow_summary_mqc.yaml")

    output:
    file "*multiqc_report.html" into ch_multiqc_report
    file "*_data"
    file "multiqc_plots"

    script:
    rtitle = custom_runName ? "--title \"$custom_runName\"" : ''
    rfilename = custom_runName ? "--filename " + custom_runName.replaceAll('\\W','_').replaceAll('_+','_') + "_multiqc_report" : ''
    custom_config_file = params.multiqc_config ? "--config $mqc_custom_config" : ''
    // TODO nf-core: Specify which MultiQC modules to use with -m for a faster run time
    """
    multiqc . -f $rtitle $rfilename $custom_config_file \\
        -m custom_content -m fastqc -m samtools -m picard
    """
}

/*
* STEP 11: Output Description HTML
*/
process output_documentation {
    publishDir "${params.outdir}/pipeline_info", mode: params.publish_dir_mode

    input:
    file output_docs from ch_output_docs

    output:
    file "results_description.html"

    script:
    """
    markdown_to_html.py $output_docs -o results_description.html
    """
}

/*
 * Completion e-mail notification
 */
workflow.onComplete {

    // Set up the e-mail variables
    def subject = "[nf-core/viralrecon] Successful: $workflow.runName"
    if (!workflow.success) {
        subject = "[nf-core/viralrecon] FAILED: $workflow.runName"
    }
    def email_fields = [:]
    email_fields['version'] = workflow.manifest.version
    email_fields['runName'] = custom_runName ?: workflow.runName
    email_fields['success'] = workflow.success
    email_fields['dateComplete'] = workflow.complete
    email_fields['duration'] = workflow.duration
    email_fields['exitStatus'] = workflow.exitStatus
    email_fields['errorMessage'] = (workflow.errorMessage ?: 'None')
    email_fields['errorReport'] = (workflow.errorReport ?: 'None')
    email_fields['commandLine'] = workflow.commandLine
    email_fields['projectDir'] = workflow.projectDir
    email_fields['summary'] = summary
    email_fields['summary']['Date Started'] = workflow.start
    email_fields['summary']['Date Completed'] = workflow.complete
    email_fields['summary']['Pipeline script file path'] = workflow.scriptFile
    email_fields['summary']['Pipeline script hash ID'] = workflow.scriptId
    if (workflow.repository) email_fields['summary']['Pipeline repository Git URL'] = workflow.repository
    if (workflow.commitId) email_fields['summary']['Pipeline repository Git Commit'] = workflow.commitId
    if (workflow.revision) email_fields['summary']['Pipeline Git branch/tag'] = workflow.revision
    email_fields['summary']['Nextflow Version'] = workflow.nextflow.version
    email_fields['summary']['Nextflow Build'] = workflow.nextflow.build
    email_fields['summary']['Nextflow Compile Timestamp'] = workflow.nextflow.timestamp

    // TODO nf-core: If not using MultiQC, strip out this code (including params.max_multiqc_email_size)
    // On success try attach the multiqc report
    def mqc_report = null
    try {
        if (workflow.success) {
            mqc_report = ch_multiqc_report.getVal()
            if (mqc_report.getClass() == ArrayList) {
                log.warn "[nf-core/viralrecon] Found multiple reports from process 'multiqc', will use only one"
                mqc_report = mqc_report[0]
            }
        }
    } catch (all) {
        log.warn "[nf-core/viralrecon] Could not attach MultiQC report to summary email"
    }

    // Check if we are only sending emails on failure
    email_address = params.email
    if (!params.email && params.email_on_fail && !workflow.success) {
        email_address = params.email_on_fail
    }

    // Render the TXT template
    def engine = new groovy.text.GStringTemplateEngine()
    def tf = new File("$baseDir/assets/email_template.txt")
    def txt_template = engine.createTemplate(tf).make(email_fields)
    def email_txt = txt_template.toString()

    // Render the HTML template
    def hf = new File("$baseDir/assets/email_template.html")
    def html_template = engine.createTemplate(hf).make(email_fields)
    def email_html = html_template.toString()

    // Render the sendmail template
    def smail_fields = [ email: email_address, subject: subject, email_txt: email_txt, email_html: email_html, baseDir: "$baseDir", mqcFile: mqc_report, mqcMaxSize: params.max_multiqc_email_size.toBytes() ]
    def sf = new File("$baseDir/assets/sendmail_template.txt")
    def sendmail_template = engine.createTemplate(sf).make(smail_fields)
    def sendmail_html = sendmail_template.toString()

    // Send the HTML e-mail
    if (email_address) {
        try {
            if (params.plaintext_email) { throw GroovyException('Send plaintext e-mail, not HTML') }
            // Try to send HTML e-mail using sendmail
            [ 'sendmail', '-t' ].execute() << sendmail_html
            log.info "[nf-core/viralrecon] Sent summary e-mail to $email_address (sendmail)"
        } catch (all) {
            // Catch failures and try with plaintext
            [ 'mail', '-s', subject, email_address ].execute() << email_txt
            log.info "[nf-core/viralrecon] Sent summary e-mail to $email_address (mail)"
        }
    }

    // Write summary e-mail HTML to a file
    def output_d = new File("${params.outdir}/pipeline_info/")
    if (!output_d.exists()) {
        output_d.mkdirs()
    }
    def output_hf = new File(output_d, "pipeline_report.html")
    output_hf.withWriter { w -> w << email_html }
    def output_tf = new File(output_d, "pipeline_report.txt")
    output_tf.withWriter { w -> w << email_txt }

    c_green = params.monochrome_logs ? '' : "\033[0;32m";
    c_purple = params.monochrome_logs ? '' : "\033[0;35m";
    c_red = params.monochrome_logs ? '' : "\033[0;31m";
    c_reset = params.monochrome_logs ? '' : "\033[0m";

    if (workflow.stats.ignoredCount > 0 && workflow.success) {
        log.info "-${c_purple}Warning, pipeline completed, but with errored process(es) ${c_reset}-"
        log.info "-${c_red}Number of ignored errored process(es) : ${workflow.stats.ignoredCount} ${c_reset}-"
        log.info "-${c_green}Number of successfully ran process(es) : ${workflow.stats.succeedCount} ${c_reset}-"
    }

    if (workflow.success) {
        log.info "-${c_purple}[nf-core/viralrecon]${c_green} Pipeline completed successfully${c_reset}-"
    } else {
        checkHostname()
        log.info "-${c_purple}[nf-core/viralrecon]${c_red} Pipeline completed with errors${c_reset}-"
    }

}

def nfcoreHeader() {
    // Log colors ANSI codes
    c_black = params.monochrome_logs ? '' : "\033[0;30m";
    c_blue = params.monochrome_logs ? '' : "\033[0;34m";
    c_cyan = params.monochrome_logs ? '' : "\033[0;36m";
    c_dim = params.monochrome_logs ? '' : "\033[2m";
    c_green = params.monochrome_logs ? '' : "\033[0;32m";
    c_purple = params.monochrome_logs ? '' : "\033[0;35m";
    c_reset = params.monochrome_logs ? '' : "\033[0m";
    c_white = params.monochrome_logs ? '' : "\033[0;37m";
    c_yellow = params.monochrome_logs ? '' : "\033[0;33m";

    return """    -${c_dim}--------------------------------------------------${c_reset}-
                                            ${c_green},--.${c_black}/${c_green},-.${c_reset}
    ${c_blue}        ___     __   __   __   ___     ${c_green}/,-._.--~\'${c_reset}
    ${c_blue}  |\\ | |__  __ /  ` /  \\ |__) |__         ${c_yellow}}  {${c_reset}
    ${c_blue}  | \\| |       \\__, \\__/ |  \\ |___     ${c_green}\\`-._,-`-,${c_reset}
                                            ${c_green}`._,._,\'${c_reset}
    ${c_purple}  nf-core/viralrecon v${workflow.manifest.version}${c_reset}
    -${c_dim}--------------------------------------------------${c_reset}-
    """.stripIndent()
}

def checkHostname() {
    def c_reset = params.monochrome_logs ? '' : "\033[0m"
    def c_white = params.monochrome_logs ? '' : "\033[0;37m"
    def c_red = params.monochrome_logs ? '' : "\033[1;91m"
    def c_yellow_bold = params.monochrome_logs ? '' : "\033[1;93m"
    if (params.hostnames) {
        def hostname = "hostname".execute().text.trim()
        params.hostnames.each { prof, hnames ->
            hnames.each { hname ->
                if (hostname.contains(hname) && !workflow.profile.contains(prof)) {
                    log.error "====================================================\n" +
                            "  ${c_red}WARNING!${c_reset} You are running with `-profile $workflow.profile`\n" +
                            "  but your machine hostname is ${c_white}'$hostname'${c_reset}\n" +
                            "  ${c_yellow_bold}It's highly recommended that you use `-profile $prof${c_reset}`\n" +
                            "============================================================"
                }
            }
        }
    }
}
