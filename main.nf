#!/usr/bin/env nextflow
/*
========================================================================================
                         nf-core/viralrecon
========================================================================================
 nf-core/viralrecon Analysis Pipeline.
 #### Homepage / Documentation
 https://github.com/nf-core/viralrecon
----------------------------------------------------------------------------------------
*/

def helpMessage() {
    log.info nfcoreHeader()
    log.info"""

    Usage:

    The typical command for running the pipeline is as follows:

    nextflow run nf-core/viralrecon --input samplesheet.csv --genome 'NC_045512.2' -profile docker

    Mandatory arguments
      --input [file]                  Comma-separated file containing information about the samples in the experiment (see docs/usage.md)
      --fasta [file]                  Path to fasta reference for viral genome. Mandatory when --genome not supplied
      --amplicon_bed [file]           Path to BED file containing amplicon positions. Mandatory when --protocol 'amplicon'
      --amplicon_fasta [file]         Path to fasta file containing amplicon sequences. Mandatory when --protocol 'amplicon'
      -profile [str]                  Configuration profile to use. Can use multiple (comma separated)
                                      Available: conda, docker, singularity, test, awsbatch, <institute> and more

    Generic
      --protocol [str]                Specifies the type of protocol used for sequencing i.e. "metagenomic" or "amplicon" (Default: "metagenomic")
      --ncbi_api_key [str]            NCBI API key that permits an increases in the number of requests to the NCBI SRA database (Default: '')

    References                        If not specified in the configuration file or you wish to overwrite any of the references
      --genome [str]                  Name of genome reference key for viral genome (Default: '')
      --gff [file]                    Full path to viral gff annotation file (Default: '')
      --save_reference [bool]         If generated by the pipeline save the Bowtie2 indices in the results directory (Default: false)

    Kraken2
      --kraken2_db [file]             Full path to Kraken2 database built from host genome (Default: kraken2_human.tar.gz hosted on Zenodo)
      --kraken2_db_name [str]         Name of host genome for building Kraken2 database (Default: 'human')
      --kraken2_use_ftp [bool]        Use FTP instead of rsync when building kraken2 databases (Default: false)
      --save_kraken2_fastq [bool]     Save the host and viral fastq files in the results directory (Default: false)

    Quality filtering and trimming
      --mean_quality [int]   		  Phed mean quality for quality filtering (Default: 20)
      --trimming_quality [int]        Phred mean quality for end trimming with fastp (Default: 15)
      --skip_trimming [bool]          Skip the adapter trimming step (Default: false)
      --save_trimmed [bool]           Save the trimmed FastQ files in the results directory (Default: false)

    Alignment
      --ivarnokeepreads [bool]		  Switches off -e parameter for ivar trim. Don't keep reads with no primers. (Default: false)
      --save_align_intermeds [bool]   Save the intermediate BAM files from the alignment steps (Default: false)

    De novo assembly
      --assemblers [str]              Specify which assembly algorithms you would like to use (Default:'spades,metaspades,unicycler')
      --skip_assembly [bool]          Skip assembly steps in the pipeline (Default: false)

    Variant calling
      --save_pileup [bool]            Save Pileup files generated during variant calling (Default: false)
      --skip_variants [bool]          Skip variant calling steps in the pipeline (Default: false)

    QC
      --skip_qc [bool]                Skip all QC steps apart from MultiQC (Default: false)
      --skip_fastqc [bool]            Skip FastQC (Default: false)
      --skip_picard_metrics           Skip Picard CollectMultipleMetrics and CollectWgsMetrics (Default: false)
      --skip_multiqc [bool]           Skip MultiQC (Default: false)

    Other options:
      --outdir [file]                 The output directory where the results will be saved
      --email [email]                 Set this parameter to your e-mail address to get a summary e-mail with details of the run sent to you when the workflow exits
      --email_on_fail [email]         Same as --email, except only send mail if the workflow is not successful
      --max_multiqc_email_size [str]  Theshold size for MultiQC report to be attached in notification email. If file generated by pipeline exceeds the threshold, it will not be attached (Default: 25MB)
      -name [str]                     Name for the pipeline run. If not specified, Nextflow will automatically generate a random mnemonic

    AWSBatch options:
      --awsqueue [str]                The AWSBatch JobQueue that needs to be set when running on AWSBatch
      --awsregion [str]               The AWS Region for your AWS Batch job to run on
      --awscli [str]                  Path to the AWS CLI tool
    """.stripIndent()
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                SET UP CONFIGURATION VARIABLES                       -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

// Show help message
if (params.help) {
    helpMessage()
    exit 0
}

// Has the run name been specified by the user?
// this has the bonus effect of catching both -name and --name
custom_runName = params.name
if (!(workflow.runName ==~ /[a-z]+_[a-z]+/)) {
    custom_runName = workflow.runName
}

////////////////////////////////////////////////////
/* --          VALIDATE INPUTS                 -- */
////////////////////////////////////////////////////

if (params.input) { ch_input = file(params.input, checkIfExists: true) } else { exit 1, "Input samplesheet file not specified!" }

if (params.protocol != 'metagenomic' && params.protocol != 'amplicon') {
    exit 1, "Invalid protocol option: ${params.protocol}. Valid options: 'metagenomic' or 'amplicon'!"
}

if (params.protocol == 'amplicon' && !params.skip_assembly && !params.amplicon_fasta) {
    exit 1, "To perform de novo assembly in 'amplicon' mode please provide a valid amplicon fasta file!"
}
if (params.amplicon_fasta) {
    ch_amplicon_fasta = Channel.fromPath(params.amplicon_fasta, checkIfExists: true)
} else {
    ch_amplicon_fasta = Channel.empty()
}

if (params.protocol == 'amplicon' && !params.skip_variants && !params.amplicon_bed) {
    exit 1, "To perform variant calling in 'amplicon' mode please provide a valid amplicon BED file!"
}
if (params.amplicon_bed) {
    ch_amplicon_bed = Channel.fromPath(params.amplicon_bed, checkIfExists: true)
}


assemblerList = [ 'spades', 'metaspades', 'unicycler' ]
assemblers = params.assemblers ? params.assemblers.split(',').collect{ it.trim().toLowerCase() } : []
if ((assemblerList + assemblers).unique().size() != assemblerList.size()) {
    exit 1, "Invalid assembler option: ${params.assemblers}. Valid options: ${assemblerList.join(', ')}"
}

// Viral reference files
if (params.genomes && params.genome && !params.genomes.containsKey(params.genome)) {
   exit 1, "The provided genome '${params.genome}' is not available in the Genome file. Currently the available genomes are ${params.genomes.keySet().join(", ")}"
}
params.fasta = params.genome ? params.genomes[ params.genome ].fasta ?: false : false
params.gff = params.genome ? params.genomes[ params.genome ].gff ?: false : false

if (params.fasta) {
    lastPath = params.fasta.lastIndexOf(File.separator)
    lastExt = params.fasta.lastIndexOf(".")
    fasta_base = params.fasta.substring(lastPath+1)
    index_base = params.fasta.substring(lastPath+1,lastExt)
    if (params.fasta.endsWith('.gz')) {
        fasta_base = params.fasta.substring(lastPath+1,lastExt)
        index_base = fasta_base.substring(0,fasta_base.lastIndexOf("."))
    }
} else {
    exit 1, "Viral genome fasta file not specified!"
}

////////////////////////////////////////////////////
/* --          CONFIG FILES                    -- */
////////////////////////////////////////////////////

ch_multiqc_config = file("$baseDir/assets/multiqc_config.yaml", checkIfExists: true)
ch_multiqc_custom_config = params.multiqc_config ? Channel.fromPath(params.multiqc_config, checkIfExists: true) : Channel.empty()
ch_output_docs = file("$baseDir/docs/output.md", checkIfExists: true)

////////////////////////////////////////////////////
/* --          HEADER FILES                    -- */
////////////////////////////////////////////////////

ch_blast_outfmt6_header = file("$baseDir/assets/headers/blast_outfmt6_header.txt", checkIfExists: true)

////////////////////////////////////////////////////
/* --                   AWS                    -- */
////////////////////////////////////////////////////

// Check AWS batch settings
if (workflow.profile.contains('awsbatch')) {
    // AWSBatch sanity checking
    if (!params.awsqueue || !params.awsregion) exit 1, "Specify correct --awsqueue and --awsregion parameters on AWSBatch!"
    // Check outdir paths to be S3 buckets if running on AWSBatch
    // related: https://github.com/nextflow-io/nextflow/issues/813
    if (!params.outdir.startsWith('s3:')) exit 1, "Outdir not on S3 - specify S3 Bucket to run on AWSBatch!"
    // Prevent trace files to be stored on S3 since S3 does not support rolling files.
    if (params.tracedir.startsWith('s3:')) exit 1, "Specify a local tracedir or run without trace! S3 cannot be used for tracefiles."
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                       HEADER LOG INFO                               -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

// Header log info
log.info nfcoreHeader()
def summary = [:]
if (workflow.revision)             summary['Pipeline Release'] = workflow.revision
summary['Run Name']                = custom_runName ?: workflow.runName
summary['Samplesheet']             = params.input
summary['Protocol']                = params.protocol
if (params.protocol == 'amplicon') summary['Amplicon Fasta File'] = params.amplicon_fasta
if (params.protocol == 'amplicon') summary['Amplicon BED File'] = params.amplicon_bed
if (params.kraken2_db)             summary['Host Kraken2 DB'] = params.kraken2_db
if (params.kraken2_db_name)        summary['Host Kraken2 Name'] = params.kraken2_db_name
summary['Viral Genome']            = params.genome ?: 'Not supplied'
summary['Viral Fasta File']        = params.fasta
if (params.gff)                    summary['Viral GFF'] = params.gff
if(params.ivarnokeepreads)		   summary['Ivar no keep reads']  = 'Yes'
if (!params.skip_trimming) {
    summary['Trim mean qual']     = params.trimming_quality
    summary['Mean qual filtering']= params.mean_quality
    if (params.save_trimmed)       summary['Save Trimmed'] = 'Yes'
} else {
    summary['Skip Trimming']       = 'Yes'
}
summary['Assembly Tools']          = params.assemblers
if (params.ncbi_api_key)           summary['NCBI API Key'] = params.ncbi_api_key
if (params.kraken2_use_ftp)        summary['Kraken2 Use FTP'] = params.kraken2_use_ftp
if (params.save_kraken2_fastq)     summary['Save Kraken2 FastQ'] = params.save_kraken2_fastq
if (params.save_reference)         summary['Save Genome Indices'] = 'Yes'
if (params.save_align_intermeds)   summary['Save Align Intermeds'] =  'Yes'
if (params.skip_assembly)          summary['Skip De novo Assembly'] =  'Yes'
if (params.save_pileup)            summary['Save Pileup'] = 'Yes'
if (params.skip_variants)          summary['Skip Variant Calling'] =  'Yes'
if (params.skip_qc)                summary['Skip QC'] = 'Yes'
if (params.skip_fastqc)            summary['Skip FastQC'] = 'Yes'
if (params.skip_picard_metrics)    summary['Skip Picard Metrics'] = 'Yes'
if (params.skip_multiqc)           summary['Skip MultiQC'] = 'Yes'
summary['Max Resources']           = "$params.max_memory memory, $params.max_cpus cpus, $params.max_time time per job"
if (workflow.containerEngine)      summary['Container'] = "$workflow.containerEngine - $workflow.container"
summary['Output dir']              = params.outdir
summary['Publish dir mode']        = params.publish_dir_mode
summary['Launch dir']              = workflow.launchDir
summary['Working dir']             = workflow.workDir
summary['Script dir']              = workflow.projectDir
summary['User']                    = workflow.userName
if (workflow.profile.contains('awsbatch')) {
    summary['AWS Region']          = params.awsregion
    summary['AWS Queue']           = params.awsqueue
    summary['AWS CLI']             = params.awscli
}
summary['Config Profile']          = workflow.profile
if (params.config_profile_description) summary['Config Description'] = params.config_profile_description
if (params.config_profile_contact)     summary['Config Contact']     = params.config_profile_contact
if (params.config_profile_url)         summary['Config URL']         = params.config_profile_url
if (params.email || params.email_on_fail) {
    summary['E-mail Address']      = params.email
    summary['E-mail on failure']   = params.email_on_fail
    summary['MultiQC maxsize']     = params.max_multiqc_email_size
}
log.info summary.collect { k,v -> "${k.padRight(19)}: $v" }.join("\n")
log.info "-\033[2m--------------------------------------------------\033[0m-"

// Check the hostnames against configured profiles
checkHostname()

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                 UNZIP/UNTAR REFERENCE FILES                         -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

/*
 * PREPROCESSING: Uncompress genome fasta file
 */
if (params.fasta.endsWith('.gz')) {
    process GUNZIP_FASTA {
        input:
        file fasta from Channel.fromPath(params.fasta, checkIfExists: true)

        output:
        file "$unzip" into ch_fasta

        script:
        unzip = fasta.toString() - '.gz'
        """
        pigz -f -d -p ${task.cpus} $fasta
        """
    }
} else {
    ch_fasta = Channel.fromPath(params.fasta, checkIfExists: true)
}

ch_fasta
    .into { ch_fasta_bowtie2
            ch_fasta_ivar_variants
            ch_fasta_ivar_consensus
            ch_fasta_picard
            ch_fasta_varscan2
            ch_fasta_snpeff
            ch_fasta_bcftools
            ch_fasta_blast
            ch_fasta_spades_abacas
            ch_fasta_spades_plasmidid
            ch_fasta_spades_quast
            ch_fasta_metaspades_abacas
            ch_fasta_metaspades_plasmidid
            ch_fasta_metaspades_quast
            ch_fasta_unicycler_abacas
            ch_fasta_unicycler_plasmidid
            ch_fasta_unicycler_quast }

/*
 * PREPROCESSING: Uncompress gff annotation file
 */
if (params.gff) {
    if (params.gff.endsWith('.gz')) {
        process GUNZIP_GFF {
            input:
            file gff from Channel.fromPath(params.gff, checkIfExists: true)

            output:
            file "$unzip" into ch_gff

            script:
            unzip = gff.toString() - '.gz'
            """
            pigz -f -d -p ${task.cpus} $gff
            """
        }
    } else {
        ch_gff = Channel.fromPath(params.gff, checkIfExists: true)
    }
} else {
    ch_gff = Channel.empty()
}

ch_gff
    .into { ch_gff_ivar_variants
            ch_gff_snpeff
            ch_gff_spades
            ch_gff_metaspades
            ch_gff_unicycler }

/*
 * PREPROCESSING: Uncompress Kraken2 database
 */
if (params.kraken2_db) {
    if (params.kraken2_db.endsWith('.tar.gz')) {
        process UNTAR_KRAKEN2_DB {
            input:
            file db from Channel.fromPath(params.kraken2_db, checkIfExists: true)

            output:
            file "$untar" into ch_kraken2_db

            script:
            untar = db.toString() - '.tar.gz'
            """
            tar -xvf $db
            """
        }
    } else {
        ch_kraken2_db = Channel.fromPath(params.kraken2_db, checkIfExists: true)
    }
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                     PARSE DESIGN FILE                               -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

/*
 * PREPROCESSING: Reformat samplesheet and check validitiy
 */
process CHECK_SAMPLESHEET {
    tag "$samplesheet"
    publishDir "${params.outdir}/pipeline_info", mode: params.publish_dir_mode

    input:
    file samplesheet from ch_input

    output:
    file "*.csv" into ch_samplesheet_reformat

    script:  // This script is bundled with the pipeline, in nf-core/viralrecon/bin/
    """
    check_samplesheet.py $samplesheet samplesheet_reformat.csv
    """
}

// Function to get list of [ sample, single_end?, is_sra?, [ fastq_1, fastq_2 ] ]
// TODO nf-core: Remove _T1 extension from SRA ids
def validate_input(LinkedHashMap sample) {
    def sample_id = sample.sample_id
    def single_end = sample.single_end.toBoolean()
    def is_sra = sample.is_sra.toBoolean()
    def fastq_1 = sample.fastq_1
    def fastq_2 = sample.fastq_2

    def array = []
    if (!is_sra) {
        if (single_end) {
            array = [ sample_id, single_end, is_sra, [ file(fastq_1, checkIfExists: true) ] ]
        } else {
            array = [ sample_id, single_end, is_sra, [ file(fastq_1, checkIfExists: true), file(fastq_2, checkIfExists: true) ] ]
        }
    } else {
        array = [ sample_id, single_end, is_sra, [ ] ]
    }

    return array
}

/*
 * Create channels for input fastq files
 */
ch_samplesheet_reformat
    .splitCsv(header:true, sep:',')
    .map { validate_input(it) }
    .into { ch_reads_fastqc;
            ch_reads_fastp }
    // TODO nf-core: Commented SRA stuff from Jose. Please leave it in for now.
    //.into { ch_reads_no_sra;
    //        ch_reads_sra }

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                     DOWNLOAD SRA FILES                              -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//
// /*
//  * Split channels between the one that have the files in the disk and those that should be downloaded
//  */
// ch_reads_no_sra_filt = ch_reads_no_sra.filter { it[2] != true }
//
// /*
//  * Get list of SRA ids that should be downloaded, if any
//  */
// sra_ids_list = ch_reads_sra
//                   .filter { it[2] == true }
//                   .map { id = it[0].split("_")[0] id }
//                   .toList()
//                   .val
//
// /*
//  * Downloading fastq files using fromSRA Nextflow function
//  */
// SRA_pointers = Channel.empty()
//
// if (!sra_ids_list.isEmpty()) {
//     SRA_pointers =  params.ncbi_api_key ? Channel.fromSRA(sra_ids_list, apiKey: params.ncbi_api_key) : Channel.fromSRA(sra_ids_list)
// }
//
// SRA_pointers
//     .into { SRA_pointers;
//             SRA_pointers_to_check }
//
// /*
//  * Validates if fastq files obtained using fromSRA are OK
//  * Obtains fastq files metadata if OK
//  */
// process VALIDATE_SRA_FASTQ {
//     tag "$id"
//     label 'process_low'
//
//     input:
//     set val(id), file(reads) from SRA_pointers
//
//     output:
//     set val(id), stdout, val("true"), file(reads) optional true into ch_fromSRA_dw_validated,
//                                                                      ch_validated_fromSRA_to_empty,
//                                                                      ch_validated_fromSRA_to_check
//
//     script:
//     """
//     fastq_info $reads > validation.tmp 2>&1 || true
//     single_end=""
//
//     if grep -q "OK" validation.tmp
//     then
//         single_end=`get_SRA_metainfo.py $id --is_single`
//     else
//         single_end="failed"
//         1>&2 echo "fastq files downloaded by \"fromSRA\" are corrupted, pipeline will try to download again with \"fasterq-dump\"!"
//     fi
//     echo \${single_end}
//     """
// }
//
// /*
//  * Create channel with target fastq files to be downloaded to check which were correctly downloaded
//  */
// Channel
//     .from(sra_ids_list)
//     .set { sra_ids_list_to_check_fromSRA }
//
// sra_ids_list_to_check_fromSRA
//     .join(ch_validated_fromSRA_to_check, remainder: true)
//     .filter { it[1]== null | it[1] =="failed" | it instanceof String }
//     .map { sample = it instanceof String ? it : it[0] sample}
//     .into { ch_fromSRA_ids_missing;
//             ch_fromSRA_ids_missing_to_check }
//
// /*
//  * Downloading fastq files using fasterq-dump
//  */
// process FASTERQ_DUMP {
//     tag "$sample"
//     label 'process_medium'
//
//     input:
//     val(sample) from ch_fromSRA_ids_missing
//
//     output:
//     set val(sample), stdout, val("true"), file("*.fastq") optional true into ch_fasterq_dump
//
//     script:
//     """
//     single_end=""
//     single_end=`get_SRA_metainfo.py $sample --is_single`
//
//     if [[ \$single_end == "true" ]]
//     then
//         fasterq-dump ${sample} \\
//             -O ./ \\
//             -t ./ \\
//             -e ${task.cpus}
//     elif [[ \$single_end == "false" ]]
//     then
//         fasterq-dump ${sample} \\
//             -O ./ \\
//             -t ./ \\
//             -e ${task.cpus} \\
//             --split-files
//     else
//         1>&2 echo -e "Problem getting metainfo of fastq files, hence \"fasterq-dump\" not run"
//         exit 1
//     fi
//     echo \${single_end}
//     """
// }
//
// /*
//  * Validates and compresses fastq files
//  */
// process VALIDATE_FASTERQ_DUMP {
//     tag "$sample"
//     label 'process_medium'
//
//     input:
//     set val(sample), val(single_end), val(is_sra), file(fastq_reads) from ch_fasterq_dump
//
//     output:
//     set val(sample), val(single_end), val(is_sra), file("*.fastq.gz") optional true into ch_fasterq_gz_validated,
//                                                                                          ch_fasterq_gz_validated_to_check,
//                                                                                          ch_fasterq_gz_validated_to_print
//
//     script:
//     if (single_end.toBoolean()) {
//         """
//         fastq_info ${sample}.fastq
//
//         pigz -cp ${task.cpus} ${sample}.fastq > ${sample}.fastq.gz
//         """
//     } else {
//         """
//         fastq_info ${sample}_1.fastq
//         fastq_info ${sample}_2.fastq
//
//         pigz -cp ${task.cpus} ${sample}_1.fastq > ${sample}_1.fastq.gz
//         pigz -cp ${task.cpus} -fc ${sample}_2.fastq > ${sample}_2.fastq.gz
//         """
//     }
// }
//
// /*
//  * Double-check if there is any fastq file that still has not been downloaded
//  */
// ch_fromSRA_ids_missing_to_check
//     .join ( ch_fasterq_gz_validated_to_check, remainder: true )
//     .filter { it[1] == null | it[1] == "failed" }
//     .map { it[0]}
//     .set { ch_unreachable_fastq_files }
//
// /*
//  * If any fastq file could not be downloaded pipeline is stopped
//  */
// ch_unreachable_fastq_files
//     .collect()
//     .map { if (it) { exit 1, "Some fastq file/s couldn't be downloaded please check its SRA ID/s: " + it.join(', ') } }
//
// /*
//  * Mix channels with downloaded fastq files with channel of local fastq files
//  */
// ch_fromSRA_dw_validated
//     .mix ( ch_fasterq_gz_validated )
//     .filter { it[1] != "failed" }
//     .map { [ it[0] + "_T1", it[1].toBoolean(), it[2], it[3] ] }
//     .mix ( ch_reads_no_sra_filt )
//     .into { ch_reads_fastqc;
//             ch_reads_fastp_default
//                }
//
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                        FASTQ QC                                     -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

/*
 * STEP 1: FastQC on raw input reads
 */
process FASTQC {
    tag "$sample"
    label 'process_medium'
    publishDir "${params.outdir}/preprocess/fastqc", mode: params.publish_dir_mode,
        saveAs: { filename ->
                      filename.endsWith(".zip") ? "zips/$filename" : "$filename"
                }

    when:
    !params.skip_fastqc && !params.skip_qc

    input:
    set val(sample), val(single_end), val(is_sra), file(reads) from ch_reads_fastqc

    output:
    file "*.{zip,html}" into ch_fastqc_raw_reports_mqc

    script:
    // Added soft-links to original fastqs for consistent naming in MultiQC
    """
    if $single_end; then
        [ ! -f  ${sample}.fastq.gz ] && ln -s $reads ${sample}.fastq.gz
        fastqc --quiet --threads $task.cpus ${sample}.fastq.gz
    else
        [ ! -f  ${sample}_1.fastq.gz ] && ln -s ${reads[0]} ${sample}_1.fastq.gz
        [ ! -f  ${sample}_2.fastq.gz ] && ln -s ${reads[1]} ${sample}_2.fastq.gz
        fastqc --quiet --threads $task.cpus ${sample}_1.fastq.gz
        fastqc --quiet --threads $task.cpus ${sample}_2.fastq.gz
    fi
    """
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                        ADAPTER TRIMMING                             -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

if (!params.skip_trimming) {
    /*
    * STEP 2.1: Quality filtering and adapter trimming
    */

	process FASTP {
		tag "$name"
        publishDir "${params.outdir}/preprocess/fastp/", mode: params.publish_dir_mode,
            saveAs: { filename ->
                          if (filename.endsWith(".html")) "$filename"
                          else if (filename.endsWith(".zip")) "fastqc/zips/$filename"
                          else if (filename.endsWith(".log")) "log/$filename"
                          else params.save_trimmed ? "$filename" : null
                    }

		input:
        set val(sample), val(single_end), val(is_sra), file(reads) from ch_reads_fastp
		val qual from params.mean_quality
		val trim_qual from params.trimming_quality

		output:
        set val(sample), val(single_end), val(is_sra), file("*.trimmed.fastq.gz") into ch_fastp_default_bowtie2,
                                                                                       ch_fastp_default_cutadapt
        set val(sample), val(single_end), val(is_sra), file("*.orphan.fastq.gz") into ch_fastp_default_orphan
        file "*.{log,fastp.html,json}" into ch_fastp_default_mqc
        file "*.{zip,fastqc.html}" into ch_fastp_default_fastqc_mqc

		script:
        orphan = single_end ? "touch ${sample}.orphan.fastq.gz" : ""
        // Added soft-links to original fastqs for consistent naming in MultiQC
		"""
        IN_READS='-i ${sample}.fastq.gz'
        OUT_READS='-o ${sample}.trimmed.fastq.gz'
        FASTQC_READS='${sample}.trimmed.fastq.gz'
        if $single_end; then
            [ ! -f  ${sample}.fastq.gz ] && ln -s $reads ${sample}.fastq.gz
        else
            [ ! -f  ${sample}_1.fastq.gz ] && ln -s ${reads[0]} ${sample}_1.fastq.gz
            [ ! -f  ${sample}_2.fastq.gz ] && ln -s ${reads[1]} ${sample}_2.fastq.gz
            IN_READS='--in1 ${sample}_1.fastq.gz --in2 ${sample}_2.fastq.gz'
            OUT_READS='--out1 ${sample}_1.trimmed.fastq.gz --unpaired1 ${sample}_1.orphan.fastq.gz --out2 ${sample}_2.trimmed.fastq.gz --unpaired2 ${sample}_2.orphan.fastq.gz'
            FASTQC_READS='${sample}_1.trimmed.fastq.gz ${sample}_2.trimmed.fastq.gz'
        fi

		fastp -w "${task.cpus}" -q "${qual}" --cut_by_quality5 \\
		--cut_front --cut_tail "${trim_qual}"\\
		--detect_adapter_for_pe \$IN_READS \$OUT_READS \\
		--json ${sample}_fastp.json --html ${sample}_fastp.html 2> ${sample}_fastp.log

		$orphan

        fastqc --quiet --threads $task.cpus \$FASTQC_READS
		"""
	}

} else {
    ch_reads_fastp
        .into { ch_fastp_default_bowtie2;
                ch_fastp_default_cutadapt }

    ch_fastp_default_mqc = Channel.empty()
    ch_fastp_default_fastqc_mqc = Channel.empty()
}


if (params.protocol == 'amplicon') {
    /*
     * STEP 2.2: Amplicon trimming with Cutadapt
     */
    process CUTADAPT {
        tag "$sample"
        label 'process_medium'
        publishDir "${params.outdir}/preprocess/cutadapt/", mode: params.publish_dir_mode,
            saveAs: { filename ->
                          if (filename.endsWith(".html")) "fastqc/$filename"
                          else if (filename.endsWith(".zip")) "fastqc/zips/$filename"
                          else if (filename.endsWith(".log")) "log/$filename"
                          else $filename
                    }

        when:
        !params.skip_assembly

        input:
        set val(sample), val(single_end), val(is_sra), file(reads) from ch_fastp_default_cutadapt
        file amplicons from ch_amplicon_fasta.collect().ifEmpty([])

        output:
        set val(sample), val(single_end), val(is_sra), file("*.primertrimmed.fastq.gz") into ch_fastp_default_kraken2
        file "*.{zip,html}" into ch_cutadapt_amplicon_fastqc_mqc
        file "*.log" into ch_cutadapt_amplicon_mqc

        script:
        """
        sed -r '/^[ACTGactg]+\$/ s/\$/X/g' $amplicons > primers.fasta
        IN_READS='${sample}.trimmed.fastq.gz'
        ADAPTERS='-a file:primers.fasta'
        OUT_READS='-o ${sample}.primertrimmed.fastq.gz'
        FASTQC_READS='${sample}.primertrimmed.fastq.gz'
        if $single_end; then
            [ ! -f  ${sample}.trimmed.fastq.gz ] && ln -s $reads ${sample}.trimmed.fastq.gz
        else
            [ ! -f  ${sample}_1.trimmed.fastq.gz ] && ln -s ${reads[0]} ${sample}_1.trimmed.fastq.gz
            [ ! -f  ${sample}_2.trimmed.fastq.gz ] && ln -s ${reads[1]} ${sample}_2.trimmed.fastq.gz
            IN_READS='${sample}_1.trimmed.fastq.gz ${sample}_2.trimmed.fastq.gz'
            ADAPTERS='-a file:primers.fasta -A file:primers.fasta'
            OUT_READS='-o ${sample}_1.primertrimmed.fastq.gz -p ${sample}_2.primertrimmed.fastq.gz'
            FASTQC_READS='${sample}_1.primertrimmed.fastq.gz ${sample}_2.primertrimmed.fastq.gz'
        fi

        cutadapt \\
            --cores=${task.cpus} \\
            --overlap 5 \\
            --minimum-length 30 \\
            --error-rate 0.1 \\
            \$ADAPTERS \\
            \$OUT_READS \\
            \$IN_READS \\
            > ${sample}.cutadapt.log
        fastqc --quiet --threads $task.cpus \$FASTQC_READS
        """
    }

} else {
    ch_fastp_default_cutadapt
        .set { ch_fastp_default_kraken2 }

    ch_cutadapt_amplicon_mqc = Channel.empty()
    ch_cutadapt_amplicon_fastqc_mqc = Channel.empty()
}



///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                  VARIANT CALLING PROCESSES                          -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

/*
 * PREPROCESSING: Build Bowtie2 index for viral genome
 */
process BUILD_BOWTIE2_INDEX {
    tag "$fasta"
    label 'process_medium'
    publishDir path: { params.save_reference ? "${params.outdir}/genome" : params.outdir },
        saveAs: { params.save_reference ? it : null }, mode: params.publish_dir_mode

    when:
    !params.skip_variants

    input:
    file fasta from ch_fasta_bowtie2

    output:
    file "Bowtie2Index" into ch_index

    script:
    """
    bowtie2-build \\
        --seed 1 \\
        --threads $task.cpus \\
        $fasta \\
        $index_base
    mkdir Bowtie2Index && mv ${index_base}* Bowtie2Index
    """
}

/*
 * STEP 3.1: Map read(s) with Bowtie 2
 */
process BOWTIE2 {
    tag "$sample"
    label 'process_medium'
    publishDir "${params.outdir}/variants/bowtie2", mode: params.publish_dir_mode,
        saveAs: { filename ->
                      if (filename.endsWith(".log")) "log/$filename"
                      else params.save_align_intermeds ? filename : null
                }

    when:
    !params.skip_variants

    input:
    set val(sample), val(single_end), val(is_sra), file(reads) from ch_fastp_default_bowtie2
    file index from ch_index.collect()

    output:
    set val(sample), val(single_end), val(is_sra), file("*.bam") into ch_bowtie2_bam
    file "*.log" into ch_bowtie2_mqc

    script:
    input_reads = single_end ? "-U $reads" : "-1 ${reads[0]} -2 ${reads[1]}"
    """
    bowtie2 \\
        --threads ${task.cpus} \\
        --local \\
        --very-sensitive-local \\
        -x ${index}/${index_base} \\
        $input_reads \\
        2> ${sample}.bowtie2.log \\
        | samtools view -@ $task.cpus -b -h -O BAM -o ${sample}.bam -
    """
}

/*
 * STEP 3.2: Convert BAM to coordinate sorted BAM
 */
process SORT_BAM {
    tag "$sample"
    label 'process_medium'
    publishDir "${params.outdir}/variants/bowtie2", mode: params.publish_dir_mode,
        saveAs: { filename ->
                      if (filename.endsWith(".flagstat")) "samtools_stats/$filename"
                      else if (filename.endsWith(".idxstats")) "samtools_stats/$filename"
                      else if (filename.endsWith(".stats")) "samtools_stats/$filename"
                      else filename
                }

    when:
    !params.skip_variants

    input:
    set val(sample), val(single_end), val(is_sra), file(bam) from ch_bowtie2_bam

    output:
    set val(sample), val(single_end), val(is_sra), file("*.sorted.{bam,bam.bai}") into ch_sort_bam_ivar,
                                                                                       ch_sort_bam_metrics,
                                                                                       ch_sort_bam_varscan2,
                                                                                       ch_sort_bam_bcftools
    file "*.{flagstat,idxstats,stats}" into ch_sort_bam_flagstat_mqc

    script:
    """
    samtools sort -@ $task.cpus -o ${sample}.sorted.bam -T $sample $bam
    samtools index ${sample}.sorted.bam
    samtools flagstat ${sample}.sorted.bam > ${sample}.sorted.bam.flagstat
    samtools idxstats ${sample}.sorted.bam > ${sample}.sorted.bam.idxstats
    samtools stats ${sample}.sorted.bam > ${sample}.sorted.bam.stats
    """
}

/*
 * STEP 3.3: Trim amplicons, call variants, and generate consensus with IVar
 */
// TODO nf-core: Add IVar log output to MultiQC
// TODO nf-core: quast {sample}.consensus.fa -r $fasta --features %gff --ref-bam $bam --output-dir quast/{$sample}
// TODO nf-core: samtools coverage {sample}.sorted.bam -o {sample}.samcov.txt
if (params.protocol != 'amplicon') {
    ch_ivar_flagstat_mqc = Channel.empty()
    ch_ivar_log = Channel.empty()
} else {
    process IVAR_TRIM {
        tag "$sample"
        label 'process_medium'
        publishDir "${params.outdir}/variants/ivar", mode: params.publish_dir_mode,
            saveAs: { filename ->
                          if (filename.endsWith(".flagstat")) "samtools_stats/$filename"
                          else if (filename.endsWith(".idxstats")) "samtools_stats/$filename"
                          else if (filename.endsWith(".stats")) "samtools_stats/$filename"
                          else if (filename.endsWith(".log")) "log/$filename"
                          else filename
                    }

        when:
        !params.skip_variants

        input:
        set val(sample), val(single_end), val(is_sra), file(bam) from ch_sort_bam_ivar
        file bed from ch_amplicon_bed.collect()

        output:
        set val(sample), val(single_end), val(is_sra), file("*.sorted.{bam,bam.bai}") into ch_ivar_variants,
                                                                                           ch_ivar_consensus,
                                                                                           ch_ivar_metrics,
                                                                                           ch_ivar_varscan2,
                                                                                           ch_ivar_bcftools
        file "*.{flagstat,idxstats,stats}" into ch_ivar_flagstat_mqc
        file "*.log" into ch_ivar_log

        script:
        switchoffe= params.ivarnokeepreads ? "" : "-e"
        prefix="${sample}.trim"
        """
        samtools view -b -F 4 ${bam[0]} > ${sample}.mapped.bam
        samtools index ${sample}.mapped.bam

        ivar trim \\
            -i ${sample}.mapped.bam \\
            ${switchoffe} \\
            -b $bed \\
            -p ${prefix} > ${prefix}.ivar.log

        samtools sort -@ $task.cpus -o ${prefix}.sorted.bam -T $prefix ${prefix}.bam
        samtools index ${prefix}.sorted.bam
        samtools flagstat ${prefix}.sorted.bam > ${prefix}.sorted.bam.flagstat
        samtools idxstats ${prefix}.sorted.bam > ${prefix}.sorted.bam.idxstats
        samtools stats ${prefix}.sorted.bam > ${prefix}.sorted.bam.stats
        """
    }
    ch_sort_bam_metrics = ch_ivar_metrics
    ch_sort_bam_varscan2 = ch_ivar_varscan2
    ch_sort_bam_bcftools = ch_ivar_bcftools

    process IVAR_VARIANTS {
        tag "$sample"
        label 'process_medium'
        publishDir "${params.outdir}/variants/ivar/variants", mode: params.publish_dir_mode

        when:
        !params.skip_variants

        input:
        set val(sample), val(single_end), val(is_sra), file(bam) from ch_ivar_variants
        file fasta from ch_fasta_ivar_variants.collect()
        file gff from ch_gff_ivar_variants.collect().ifEmpty([])

        output:
        set val(sample), val(single_end), val(is_sra), file("*.tsv") into ch_ivar_variants_tsv

        script:
        features = params.gff ? "-g $gff" : ""
        """
        samtools mpileup \\
            -A \\
            -d 6000000 \\
            -B \\
            -Q 0 \\
            ${bam[0]} \\
            | ivar variants -p ${sample} -r $fasta $features
        """
    }

    process IVAR_CONSENSUS {
        tag "$sample"
        label 'process_medium'
        publishDir "${params.outdir}/variants/ivar/consensus", mode: params.publish_dir_mode

        when:
        !params.skip_variants

        input:
        set val(sample), val(single_end), val(is_sra), file(bam) from ch_ivar_consensus
        file fasta from ch_fasta_ivar_consensus.collect()

        output:
        set val(sample), val(single_end), val(is_sra), file("*.fa") into ch_ivar_consensus_fasta
        set val(sample), val(single_end), val(is_sra), file("*.txt") into ch_ivar_consensus_qual

        script:
        """
        samtools mpileup \\
            -A \\
            -d 6000000 \\
            -B \\
            -Q 0 \\
            --reference $fasta \\
            ${bam[0]} \\
            | ivar consensus -p ${sample}.consensus -n N
        """
    }
}

/*
 * STEP 3.4: Picard CollectMultipleMetrics and CollectWgsMetrics
 */
process PICARD_METRICS {
    tag "$sample"
    label 'process_medium'
    publishDir path: "${params.outdir}/variants/${program}/picard_metrics", mode: params.publish_dir_mode

    when:
    !params.skip_variants && !params.skip_picard_metrics && !params.skip_qc

    input:
    set val(sample), val(single_end), val(is_sra), file(bam) from ch_sort_bam_metrics
    file fasta from ch_fasta_picard.collect()

    output:
    file "*metrics" into ch_picard_metrics_mqc
    file "*.pdf" into ch_picard_metrics_pdf

    script:
    def avail_mem = 3
    if (!task.memory) {
        log.info "[Picard CollectMultipleMetrics] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this."
    } else {
        avail_mem = task.memory.toGiga()
    }
    program = params.protocol == 'amplicon' ? "ivar" : "bowtie2"
    prefix = params.protocol == 'amplicon' ? "${sample}.trim" : "${sample}"
    """
    picard -Xmx${avail_mem}g CollectMultipleMetrics \\
        INPUT=${bam[0]} \\
        OUTPUT=${prefix}.CollectMultipleMetrics \\
        REFERENCE_SEQUENCE=$fasta \\
        VALIDATION_STRINGENCY=LENIENT \\
        TMP_DIR=tmp

    picard -Xmx${avail_mem}g CollectWgsMetrics \\
        COVERAGE_CAP=1000000 \\
        INPUT=${bam[0]} \\
        OUTPUT=${prefix}.CollectWgsMetrics.coverage_metrics \\
        REFERENCE_SEQUENCE=$fasta \\
        VALIDATION_STRINGENCY=LENIENT \\
        TMP_DIR=tmp
    """
}

/*
 * STEP 3.5: Variant calling with VarScan 2
 */
// TODO nf-core: Add Varscan 2/BCFTools log output to MultiQC
process VARSCAN2 {
    tag "$sample"
    label 'process_medium'
    publishDir "${params.outdir}/variants/varscan2", mode: params.publish_dir_mode,
        saveAs: { filename ->
            		      if (filename.endsWith("vcf.gz")) "$filename"
                      else if (filename.endsWith("vcf.gz.tbi")) "$filename"
                      else if (filename.endsWith(".log")) "log/$filename"
                      else params.save_pileup ? filename : null
                }

    when:
    !params.skip_variants

    input:
    set val(sample), val(single_end), val(is_sra), file(bam) from ch_sort_bam_varscan2
    file fasta from ch_fasta_varscan2.collect()

    output:
    set val(sample), val(single_end), val(is_sra), file("*.highfreq.vcf.gz*") into ch_varscan2_highfreq_snpeff,
                                                                                   ch_varscan2_highfreq_consensus
    set val(sample), val(single_end), val(is_sra), file("*.lowfreq.vcf.gz*") into ch_varscan2_lowfreq_snpeff
    file "*.pileup" into ch_varscan2_pileup
    file "*.log" into ch_varscan2_log

    script:
    """
    samtools mpileup \\
        --count-orphans \\
        --max-depth 20000 \\
        --min-BQ 0 \\
        --fasta-ref $fasta \\
        ${bam[0]} \\
        > ${sample}.pileup

    varscan mpileup2cns \\
        ${sample}.pileup \\
        --min-var-freq 0.02 \\
        --p-value 0.99 \\
        --variants \\
        --output-vcf 1 \\
        2> ${sample}.lowfreq.varscan2.log \\
        | bgzip -c > ${sample}.lowfreq.vcf.gz
    tabix -p vcf -f ${sample}.lowfreq.vcf.gz

    varscan mpileup2cns \\
        ${sample}.pileup \\
        --min-var-freq 0.8 \\
        --p-value 0.05 \\
        --variants \\
        --output-vcf 1 \\
        2> ${sample}.highfreq.varscan2.log \\
        | bgzip -c > ${sample}.highfreq.vcf.gz
    tabix -p vcf -f ${sample}.highfreq.vcf.gz
    """
}

/*
 * STEP 3.6: Variant calling annotation with SnpEff and SnpSift
 */
process SNPEFF {
    tag "$sample"
    label 'process_medium'
    publishDir "${params.outdir}/variants/varscan2/snpeff", mode: params.publish_dir_mode

    when:
    !params.skip_variants && params.gff

    input:
    set val(sample), val(single_end), val(is_sra), file(highfreq_vcf), file(lowfreq_vcf) from ch_varscan2_highfreq_snpeff.join(ch_varscan2_lowfreq_snpeff, by: [0,1,2])
    file fasta from ch_fasta_snpeff.collect()
    file gff from ch_gff_snpeff.collect()

    output:
    file "*.vcf.gz*" into ch_snpeff_vcf
    file "*.{txt,html}" into ch_snpeff_reports
    file "*.highfreq.snpEff.csv" into ch_snpeff_highfreq_mqc
    file "*.lowfreq.snpEff.csv" into ch_snpeff_lowfreq_mqc

    script:
    """
    mkdir -p ./data/genomes/ && cd ./data/genomes/
    ln -s ../../$fasta ${index_base}.fa
    cd ../../

    mkdir -p ./data/${index_base}/ && cd ./data/${index_base}/
    ln -s ../../$gff genes.gff
    cd ../../
    echo "${index_base}.genome : ${index_base}" > snpeff.config
    snpEff build -config ./snpeff.config -dataDir ./data -gff3 -v ${index_base}

    snpEff ${index_base} \\
        -config ./snpeff.config \\
        -dataDir ./data ${highfreq_vcf[0]} \\
        -csvStats ${sample}.highfreq.snpEff.csv \\
        | bgzip -c > ${sample}.highfreq.snpEff.vcf.gz
    tabix -p vcf -f ${sample}.highfreq.snpEff.vcf.gz
    mv snpEff_summary.html ${sample}.highfreq.snpEff.summary.html

    SnpSift extractFields -s "," \\
        -e "." \\
        ${sample}.highfreq.snpEff.vcf.gz \\
        CHROM POS REF ALT \\
        "ANN[*].GENE" "ANN[*].GENEID" \\
        "ANN[*].IMPACT" "ANN[*].EFFECT" \\
        "ANN[*].FEATURE" "ANN[*].FEATUREID" \\
        "ANN[*].BIOTYPE" "ANN[*].RANK" "ANN[*].HGVS_C" \\
        "ANN[*].HGVS_P" "ANN[*].CDNA_POS" "ANN[*].CDNA_LEN" \\
        "ANN[*].CDS_POS" "ANN[*].CDS_LEN" "ANN[*].AA_POS" \\
        "ANN[*].AA_LEN" "ANN[*].DISTANCE" "EFF[*].EFFECT" \\
        "EFF[*].FUNCLASS" "EFF[*].CODON" "EFF[*].AA" "EFF[*].AA_LEN" \\
        > ${sample}.highfreq.snpSift.table.txt

    snpEff ${index_base} \\
        -config ./snpeff.config \\
        -dataDir ./data ${lowfreq_vcf[0]} \\
        -csvStats ${sample}.lowfreq.snpEff.csv \\
        | bgzip -c > ${sample}.lowfreq.snpEff.vcf.gz
    tabix -p vcf -f ${sample}.lowfreq.snpEff.vcf.gz
    mv snpEff_summary.html ${sample}.lowfreq.snpEff.summary.html

    SnpSift extractFields -s "," \\
        -e "." \\
        ${sample}.lowfreq.snpEff.vcf.gz \\
        CHROM POS REF ALT \\
        "ANN[*].GENE" "ANN[*].GENEID" \\
        "ANN[*].IMPACT" "ANN[*].EFFECT" \\
        "ANN[*].FEATURE" "ANN[*].FEATUREID" \\
        "ANN[*].BIOTYPE" "ANN[*].RANK" "ANN[*].HGVS_C" \\
        "ANN[*].HGVS_P" "ANN[*].CDNA_POS" "ANN[*].CDNA_LEN" \\
        "ANN[*].CDS_POS" "ANN[*].CDS_LEN" "ANN[*].AA_POS" \\
        "ANN[*].AA_LEN" "ANN[*].DISTANCE" "EFF[*].EFFECT" \\
        "EFF[*].FUNCLASS" "EFF[*].CODON" "EFF[*].AA" "EFF[*].AA_LEN" \\
        > ${sample}.lowfreq.snpSift.table.txt
    	"""
}

/*
 * STEP 3.7: Genome consensus generation with BCFtools and masked with BEDTools
 */
process BCFTOOLS_CONSENSUS {
    tag "$sample"
    label 'process_medium'
    publishDir "${params.outdir}/variants/bcftools", mode: params.publish_dir_mode

    when:
    !params.skip_variants

    input:
    set val(sample), val(single_end), val(is_sra), file(bam), file(vcf) from ch_sort_bam_bcftools.join(ch_varscan2_highfreq_consensus, by: [0,1,2])
    file fasta from ch_fasta_bcftools.collect()

    output:
    file "*consensus.fa" into ch_bcftools_unmasked_consensus
    file "*consensus.masked.fa" into ch_bcftools_masked_consensus

    script:
    """
    cat $fasta | bcftools consensus ${vcf[0]} > ${sample}.consensus.fa

    bedtools genomecov \\
        -bga \\
        -ibam ${bam[0]} \\
        -g $fasta \\
        | awk '\$4 < 20' | bedtools merge > ${sample}.mask.bed

    bedtools maskfasta \\
        -fi ${sample}.consensus.fa \\
        -bed ${sample}.mask.bed \\
        -fo ${sample}.consensus.masked.fa
    sed -i 's/${index_base}/${sample}/g' ${sample}.consensus.masked.fa
    """
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                    DENOVO ASSEMBLY PROCESSES                        -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

/*
 * PREPROCESSING: Build Blast database for viral genome
 */
process BUILD_BLAST_DB {
    tag "$fasta"
    label 'process_medium'
    publishDir path: { params.save_reference ? "${params.outdir}/genome" : params.outdir },
        saveAs: { params.save_reference ? it : null }, mode: params.publish_dir_mode

    when:
    !params.skip_assembly

    input:
    file fasta from ch_fasta_blast

    output:
    file "BlastDB" into ch_blast_db_spades,
                        ch_blast_db_metaspades,
                        ch_blast_db_unicycler

    script:
    """
    makeblastdb \\
        -in $fasta \\
        -parse_seqids \\
        -dbtype nucl
    mkdir BlastDB && mv ${fasta}* BlastDB
    """
}

/*
 * PREPROCESSING: Build Kraken2 database for host genome
 */
// Function to check if running offline
def isOffline() {
    try {
        return NXF_OFFLINE as Boolean
    }
    catch( Exception e ) {
        return false
    }
}
if (!isOffline()) {
    if (!params.kraken2_db) {
        if (!params.kraken2_db_name) { exit 1, "Please specify a valid name to build Kraken2 database for host e.g. 'human'!" }

        process BUILD_KRAKEN2_DB {
            tag "$db"
            label 'process_high'
            publishDir path: { params.save_reference ? "${params.outdir}/genome" : params.outdir },
                saveAs: { params.save_reference ? it : null }, mode: params.publish_dir_mode

            when:
            !params.skip_assembly

            output:
            file "$db" into ch_kraken2_db

            script:
            db = "kraken2_${params.kraken2_db_name}"
            ftp = params.kraken2_use_ftp ? "--use-ftp" : ""
            """
            kraken2-build --db $db --threads $task.cpus $ftp --download-taxonomy
            kraken2-build --db $db --threads $task.cpus $ftp --download-library $params.kraken2_db_name
            kraken2-build --db $db --threads $task.cpus $ftp --build

            cd $db
            if [ -d "taxonomy" ]; then rm -rf taxonomy; fi
            if [ -d "library" ]; then rm -rf library; fi
            if [ -f "seqid2taxid.map" ]; then rm seqid2taxid.map; fi
            """
        }
    }
} else {
    exit 1, "NXF_OFFLINE=true or -offline has been set so cannot download files required to build Kraken2 database!"
}

/*
 * STEP 4.1: Filter reads with Kraken2
 */
// TODO nf-core: Add Kraken2 log output to MultiQC
process KRAKEN2 {
    tag "$db"
    label 'process_high'
    publishDir "${params.outdir}/preprocess/kraken2", mode: params.publish_dir_mode,
        saveAs: { filename ->
                      if (filename.endsWith(".txt")) filename
                      else params.save_kraken2_fastq ? filename : null
                }

    when:
    !params.skip_assembly

    input:
    set val(sample), val(single_end), val(is_sra), file(reads) from ch_fastp_default_kraken2
    file db from ch_kraken2_db.collect()

    output:
    set val(sample), val(single_end), val(is_sra), file("*.viral*") into ch_kraken2_spades,
                                                                         ch_kraken2_metaspades,
                                                                         ch_kraken2_unicycler
    set val(sample), val(single_end), val(is_sra), file("*.host*") into ch_kraken2_host_reads
    file "*.report.txt" into ch_kraken2_report

    script:
    pe = single_end ? "" : "--paired"
    classified = single_end ? "${sample}.host.fastq" : "${sample}.host#.fastq"
    unclassified = single_end ? "${sample}.viral.fastq" : "${sample}.viral#.fastq"
    """
    kraken2 \\
        --db $db \\
        --threads $task.cpus \\
        --unclassified-out $unclassified \\
        --classified-out $classified \\
        --report ${sample}.kraken2.report.txt \\
        $pe \\
        --gzip-compressed \\
        $reads
    pigz -p $task.cpus *.fastq
    """
}

////////////////////////////////////////////////////
/* --                SPADES                    -- */
////////////////////////////////////////////////////

/*
 * STEP 4.2: De novo assembly with SPAdes
 */
// TODO nf-core: Output other files generated by the assemblers too?
// TODO nf-core: Rename and output gfa files too?
process SPADES {
    tag "$sample"
    label 'process_medium'
    publishDir "${params.outdir}/assembly/spades", mode: params.publish_dir_mode

    when:
    !params.skip_assembly && 'spades' in assemblers

    input:
    set val(sample), val(single_end), val(is_sra), file(reads) from ch_kraken2_spades

    output:
    set val(sample), val(single_end), val(is_sra), file("*scaffolds.fa") into ch_spades_quast,
                                                                              ch_spades_blast,
                                                                              ch_spades_abacas,
                                                                              ch_spades_plasmidid

    script:
    input_reads = single_end ? "-s $reads" : "-1 ${reads[0]} -2 ${reads[1]}"
    """
    spades.py \\
        --threads ${task.cpus} \\
        $input_reads \\
        -o ./
    mv scaffolds.fasta ${sample}.scaffolds.fa
    """
}

/*
 * STEP 4.2.1: Run Blast on SPAdes de novo assembly
 */
process SPADES_BLAST {
    tag "$sample"
    label 'process_medium'
    publishDir "${params.outdir}/assembly/spades/blast", mode: params.publish_dir_mode

    when:
    !params.skip_assembly && 'spades' in assemblers

    input:
    set val(sample), val(single_end), val(is_sra), file(scaffold) from ch_spades_blast
    file db from ch_blast_db_spades.collect()
    file header from ch_blast_outfmt6_header

    output:
    file "*.blast.txt" into ch_blast_spades_results
    file "*.blast.filt.header.txt" into ch_blast_spades_filt_results

    script:
    """
    blastn \\
        -num_threads ${task.cpus} \\
        -db $db/$fasta_base \\
        -query $scaffold \\
        -outfmt \'6 stitle std slen qlen qcovs\' \\
        -out ${sample}.blast.txt

    awk 'BEGIN{OFS=\"\\t\";FS=\"\\t\"}{print \$0,\$5/\$15,\$5/\$14}' ${sample}.blast.txt | awk 'BEGIN{OFS=\"\\t\";FS=\"\\t\"} \$15 > 200 && \$17 > 0.7 && \$1 !~ /phage/ {print \$0}' > ${sample}.blast.filt.txt
    cat $header ${sample}.blast.filt.txt > ${sample}.blast.filt.header.txt
    """
}

/*
 * STEP 4.2.2: Run ABACAS on SPAdes de novo assembly
 */
process SPADES_ABACAS {
    tag "$sample"
    label "process_medium"
    publishDir "${params.outdir}/assembly/spades/abacas", mode: params.publish_dir_mode,
        saveAs: { filename ->
                      if (filename.indexOf("nucmer") > 0) "nucmer/$filename"
                      else filename
                }

    when:
    !params.skip_assembly && 'spades' in assemblers

    input:
    set val(sample), val(single_end), val(is_sra), file(scaffold) from ch_spades_abacas
    file fasta from ch_fasta_spades_abacas.collect()

    output:
    set val(sample), val(single_end), val(is_sra), file("*.abacas.fasta") into ch_spades_abacas_fasta
    file "*.abacas*" into ch_spades_abacas_results

    script:
    """
    abacas.pl -r $fasta -q $scaffold -m -p nucmer -o ${sample}.abacas
    mv nucmer.delta ${sample}.abacas.nucmer.delta
    mv nucmer.filtered.delta ${sample}.abacas.nucmer.filtered.delta
    mv nucmer.tiling ${sample}.abacas.nucmer.tiling
    mv unused_contigs.out ${sample}.abacas.unused.contigs.out
    """
}

/*
 * STEP 4.2.3: Run PlasmidID on SPAdes de novo assembly
 */
process SPADES_PLASMIDID {
    tag "$sample"
    label "process_medium"
    publishDir "${params.outdir}/assembly/spades/plasmidid", mode: params.publish_dir_mode

    when:
    !params.skip_assembly && 'spades' in assemblers

    input:
    set val(sample), val(single_end), val(is_sra), file(scaffold) from ch_spades_plasmidid.filter { it.size() > 0 }
    file fasta from ch_fasta_spades_plasmidid.collect()

    output:
    file "$sample" into ch_spades_plasmidid_results

    script:
    """
    plasmidID -d $fasta -s $sample -c $scaffold --only-reconstruct -C 47 -S 47 -i 60 --no-trim -o .
    mv NO_GROUP/$sample ./$sample
    """
}

/*
 * STEP 4.2.4: Run Quast on SPAdes de novo assembly
 */
process SPADES_QUAST {
    label 'process_medium'
    publishDir "${params.outdir}/assembly/spades", mode: params.publish_dir_mode

    when:
    !params.skip_assembly && 'spades' in assemblers

    input:
    file scaffolds from ch_spades_quast.collect{ it[3] }
    file fasta from ch_fasta_spades_quast.collect()
    file gff from ch_gff_spades.collect().ifEmpty([])

    output:
    file "quast/" into ch_quast_spades_results
    file "quast/report.tsv" into ch_quast_spades_mqc

    script:
    features = params.gff ? "--features $gff" : ""
    """
    quast.py \\
        --output-dir quast \\
        -r $fasta \\
        $features \\
        --threads ${task.cpus} \\
        ${scaffolds.join(' ')}
    """
}

////////////////////////////////////////////////////
/* --               METASPADES                 -- */
////////////////////////////////////////////////////

/*
 * STEP 4.2: De novo assembly with MetaSPAdes
 */
process METASPADES {
    tag "$sample"
    label 'process_medium'
    publishDir "${params.outdir}/assembly/metaspades", mode: params.publish_dir_mode

    when:
    !params.skip_assembly && 'metaspades' in assemblers && !single_end

    input:
    set val(sample), val(single_end), val(is_sra), file(reads) from ch_kraken2_metaspades

    output:
    set val(sample), val(single_end), val(is_sra), file("*scaffolds.fa") into ch_metaspades_quast,
                                                                              ch_metaspades_blast,
                                                                              ch_metaspades_abacas,
                                                                              ch_metaspades_plasmidid

    script:
    """
    spades.py \\
        --meta \\
        --threads ${task.cpus} \\
        -1 ${reads[0]} \\
        -2 ${reads[1]} \\
        -o ./
    mv scaffolds.fasta ${sample}.meta.scaffolds.fa
    """
}

/*
 * STEP 4.2.1: Run Blast on MetaSPAdes de novo assembly
 */
process METASPADES_BLAST {
    tag "$sample"
    label 'process_medium'
    publishDir "${params.outdir}/assembly/metaspades/blast", mode: params.publish_dir_mode

    when:
    !params.skip_assembly && 'metaspades' in assemblers && !single_end

    input:
    set val(sample), val(single_end), val(is_sra), file(scaffold) from ch_metaspades_blast
    file db from ch_blast_db_metaspades.collect()
    file header from ch_blast_outfmt6_header

    output:
    file "*.blast.txt" into ch_blast_metaspades_results
    file "*.blast.filt.header.txt" into ch_blast_metaspades_filt_results

    script:
    """
    blastn \\
        -num_threads ${task.cpus} \\
        -db $db/$fasta_base \\
        -query $scaffold \\
        -outfmt \'6 stitle std slen qlen qcovs\' \\
        -out ${sample}.blast.txt

    awk 'BEGIN{OFS=\"\\t\";FS=\"\\t\"}{print \$0,\$5/\$15,\$5/\$14}' ${sample}.blast.txt | awk 'BEGIN{OFS=\"\\t\";FS=\"\\t\"} \$15 > 200 && \$17 > 0.7 && \$1 !~ /phage/ {print \$0}' > ${sample}.blast.filt.txt
    cat $header ${sample}.blast.filt.txt > ${sample}.blast.filt.header.txt
    """
}

/*
 * STEP 4.2.2: Run ABACAS on MetaSPAdes de novo assembly
 */
process METASPADES_ABACAS {
    tag "$sample"
    label "process_medium"
    publishDir "${params.outdir}/assembly/metaspades/abacas", mode: params.publish_dir_mode,
        saveAs: { filename ->
                      if (filename.indexOf("nucmer") > 0) "nucmer/$filename"
                      else filename
                }

    when:
    !params.skip_assembly && 'metaspades' in assemblers && !single_end

    input:
    set val(sample), val(single_end), val(is_sra), file(scaffold) from ch_metaspades_abacas
    file fasta from ch_fasta_metaspades_abacas.collect()

    output:
    set val(sample), val(single_end), val(is_sra), file("*.abacas.fasta") into ch_metaspades_abacus_fasta
    file "*.abacas*" into ch_metaspades_abacus_results

    script:
    """
    abacas.pl -r $fasta -q $scaffold -m -p nucmer -o ${sample}.abacas
    mv nucmer.delta ${sample}.abacas.nucmer.delta
    mv nucmer.filtered.delta ${sample}.abacas.nucmer.filtered.delta
    mv nucmer.tiling ${sample}.abacas.nucmer.tiling
    mv unused_contigs.out ${sample}.abacas.unused.contigs.out
    """
}

/*
 * STEP 4.2.3: Run PlasmidID on MetaSPAdes de novo assembly
 */
process METASPADES_PLASMIDID {
    tag "$sample"
    label "process_medium"
    publishDir "${params.outdir}/assembly/metaspades/plasmidid", mode: params.publish_dir_mode

    when:
    !params.skip_assembly && 'metaspades' in assemblers && !single_end

    input:
    set val(sample), val(single_end), val(is_sra), file(scaffold) from ch_metaspades_plasmidid.filter { it.size() > 0 }
    file fasta from ch_fasta_metaspades_plasmidid.collect()

    output:
    file "$sample" into ch_metaspades_plasmidid_results

    script:
    """
    plasmidID -d $fasta -s $sample -c $scaffold --only-reconstruct -C 47 -S 47 -i 60 --no-trim -o .
    mv NO_GROUP/$sample ./$sample
    """
}

/*
 * STEP 4.2.4: Run Quast on MetaSPAdes de novo assembly
 */
process METASPADES_QUAST {
    label 'process_medium'
    publishDir "${params.outdir}/assembly/metaspades", mode: params.publish_dir_mode

    when:
    !params.skip_assembly && 'metaspades' in assemblers && !single_end

    input:
    file scaffolds from ch_metaspades_quast.collect{ it[3] }
    file fasta from ch_fasta_metaspades_quast.collect()
    file gff from ch_gff_metaspades.collect().ifEmpty([])

    output:
    file "quast/" into ch_quast_metaspades_results
    file "quast/report.tsv" into ch_quast_metaspades_mqc

    script:
    features = params.gff ? "--features $gff" : ""
    """
    quast.py \\
        --output-dir quast \\
        -r $fasta \\
        $features \\
        --threads ${task.cpus} \\
        ${scaffolds.join(' ')}
    """
}

////////////////////////////////////////////////////
/* --               UNICYCLER                  -- */
////////////////////////////////////////////////////

/*
 * STEP 4.2: De novo assembly with Unicycler
 */
process UNICYCLER {
    tag "$sample"
    label 'process_medium'
    publishDir "${params.outdir}/assembly/unicycler", mode: params.publish_dir_mode

    when:
    !params.skip_assembly && 'unicycler' in assemblers

    input:
    set val(sample), val(single_end), val(is_sra), file(reads) from ch_kraken2_unicycler

    output:
    set val(sample), val(single_end), val(is_sra), file("*assembly.fa") into ch_unicycler_quast,
                                                                             ch_unicycler_blast,
                                                                             ch_unicycler_abacas,
                                                                             ch_unicycler_plasmidid

    script:
    input_reads = single_end ? "-s $reads" : "-1 ${reads[0]} -2 ${reads[1]}"
    """
    unicycler \\
        --threads ${task.cpus} \\
        $input_reads \\
        --out ./
    mv assembly.fasta ${sample}.assembly.fa
    """
}

/*
 * STEP 4.2.1: Run Blast on MetaSPAdes de novo assembly
 */
process UNICYCLER_BLAST {
    tag "$sample"
    label 'process_medium'
    publishDir "${params.outdir}/assembly/unicycler/blast", mode: params.publish_dir_mode

    when:
    !params.skip_assembly && 'unicycler' in assemblers

    input:
    set val(sample), val(single_end), val(is_sra), file(scaffold) from ch_unicycler_blast
    file db from ch_blast_db_unicycler.collect()
    file header from ch_blast_outfmt6_header

    output:
    file "*.blast.txt" into ch_blast_unicycler_results
    file "*.blast.filt.header.txt" into ch_blast_unicycler_filt_results

    script:
    """
    blastn \\
        -num_threads ${task.cpus} \\
        -db $db/$fasta_base \\
        -query $scaffold \\
        -outfmt \'6 stitle std slen qlen qcovs\' \\
        -out ${sample}.blast.txt

    awk 'BEGIN{OFS=\"\\t\";FS=\"\\t\"}{print \$0,\$5/\$15,\$5/\$14}' ${sample}.blast.txt | awk 'BEGIN{OFS=\"\\t\";FS=\"\\t\"} \$15 > 200 && \$17 > 0.7 && \$1 !~ /phage/ {print \$0}' > ${sample}.blast.filt.txt
    cat $header ${sample}.blast.filt.txt > ${sample}.blast.filt.header.txt
    """
}

/*
 * STEP 4.2.2: Run ABACAS on Unicycler de novo assembly
 */
process UNICYCLER_ABACAS {
    tag "$sample"
    label "process_medium"
    publishDir "${params.outdir}/assembly/unicycler/abacas", mode: params.publish_dir_mode,
        saveAs: { filename ->
                      if (filename.indexOf("nucmer") > 0) "nucmer/$filename"
                      else filename
                }

    when:
    !params.skip_assembly && 'unicycler' in assemblers

    input:
    set val(sample), val(single_end), val(is_sra), file(scaffold) from ch_unicycler_abacas
    file fasta from ch_fasta_unicycler_abacas.collect()

    output:
    set val(sample), val(single_end), val(is_sra), file("*.abacas.fasta") into ch_unicycler_abacas_fasta
    file "*.abacas*" into ch_unicycler_abacas_results

    script:
    """
    abacas.pl -r $fasta -q $scaffold -m -p nucmer -o ${sample}.abacas
    mv nucmer.delta ${sample}.abacas.nucmer.delta
    mv nucmer.filtered.delta ${sample}.abacas.nucmer.filtered.delta
    mv nucmer.tiling ${sample}.abacas.nucmer.tiling
    mv unused_contigs.out ${sample}.abacas.unused.contigs.out
    """
}

/*
 * STEP 4.2.3: Run PlasmidID on Unicycler de novo assembly
 */
process UNICYCLER_PLASMIDID {
    tag "$sample"
    label "process_medium"
    publishDir "${params.outdir}/assembly/unicycler/plasmidid", mode: params.publish_dir_mode

    when:
    !params.skip_assembly && 'unicycler' in assemblers

    input:
    set val(sample), val(single_end), val(is_sra), file(scaffold) from ch_unicycler_plasmidid.filter { it.size() > 0 }
    file fasta from ch_fasta_unicycler_plasmidid.collect()

    output:
    file "$sample" into ch_unicycler_plasmidid_results

    script:
    """
    plasmidID -d $fasta -s $sample -c $scaffold --only-reconstruct -C 47 -S 47 -i 60 --no-trim -o .
    mv NO_GROUP/$sample ./$sample
    """
}

/*
 * STEP 4.2.4: Run Quast on Unicycler de novo assembly
 */
process UNICYCLER_QUAST {
    label 'process_medium'
    publishDir "${params.outdir}/assembly/unicycler", mode: params.publish_dir_mode

    when:
    !params.skip_assembly && 'unicycler' in assemblers

    input:
    file scaffolds from ch_unicycler_quast.collect{ it[3] }
    file fasta from ch_fasta_unicycler_quast.collect()
    file gff from ch_gff_unicycler.collect().ifEmpty([])

    output:
    file "quast/" into ch_quast_unicycler_results
    file "quast/report.tsv" into ch_quast_unicycler_mqc

    script:
    features = params.gff ? "--features $gff" : ""
    """
    quast.py \\
        --output-dir quast \\
        -r $fasta \\
        $features \\
        --threads ${task.cpus} \\
        ${scaffolds.join(' ')}
    """
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                          MULTIQC                                    -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

Channel.from(summary.collect{ [it.key, it.value] })
    .map { k,v -> "<dt>$k</dt><dd><samp>${v ?: '<span style=\"color:#999999;\">N/A</a>'}</samp></dd>" }
    .reduce { a, b -> return [a, b].join("\n            ") }
    .map { x -> """
    id: 'nf-core-viralrecon-summary'
    description: " - this information is collected when the pipeline is started."
    section_name: 'nf-core/viralrecon Workflow Summary'
    section_href: 'https://github.com/nf-core/viralrecon'
    plot_type: 'html'
    data: |
        <dl class=\"dl-horizontal\">
            $x
        </dl>
    """.stripIndent() }
    .set { ch_workflow_summary }

/*
 * Parse software version numbers
 */
process get_software_versions {
    publishDir "${params.outdir}/pipeline_info", mode: params.publish_dir_mode,
        saveAs: { filename ->
                      if (filename.indexOf(".csv") > 0) filename
                      else null
                }

    output:
    file 'software_versions_mqc.yaml' into ch_software_versions_yaml
    file "software_versions.csv"

    script:
    """
    echo $workflow.manifest.version > v_pipeline.txt
    echo $workflow.nextflow.version > v_nextflow.txt
    fastqc --version > v_fastqc.txt
    fastp --version > v_fastp.txt
    cutadapt --version > v_cutadapt.txt
    kraken2 --version > v_kraken2.txt
    bowtie2 --version > v_bowtie2.txt
    samtools --version > v_samtools.txt
    bedtools --version > v_bedtools.txt
    picard MarkDuplicates --version &> v_picard.txt || true
    ivar -v > v_ivar.txt
    echo \$(varscan 2>&1) > v_varscan.txt
    snpEff -version > v_snpeff.txt
    echo \$(SnpSift 2>&1) > v_snpsift.txt
    bcftools -v > v_bcftools.txt
    spades.py --version > v_spades.txt
    unicycler --version > v_unicycler.txt
    quast.py --version > v_quast.txt
    blastn -version > v_blast.txt
    abacas.pl -v &> v_abacas.txt || true
    echo \$(R --version 2>&1) > v_R.txt
    multiqc --version > v_multiqc.txt
    scrape_software_versions.py &> software_versions_mqc.yaml
    """
}

/*
 * STEP 10: MultiQC
 */
process MULTIQC {
    publishDir "${params.outdir}/multiqc", mode: params.publish_dir_mode

    when:
    !params.skip_multiqc

    input:
    file (multiqc_config) from ch_multiqc_config
    file (mqc_custom_config) from ch_multiqc_custom_config.collect().ifEmpty([])
    file ('fastqc/raw/*') from ch_fastqc_raw_reports_mqc.collect().ifEmpty([])
    file ('fastqc/fastp/*') from ch_fastp_default_fastqc_mqc.collect().ifEmpty([])
    file ('fastqc/cutadapt/*') from ch_cutadapt_amplicon_fastqc_mqc.collect().ifEmpty([])
    file ('fastp/*') from ch_fastp_default_mqc.collect().ifEmpty([])
    file ('cutadapt/*') from ch_cutadapt_amplicon_mqc.collect().ifEmpty([])
    file ('bowtie2/*') from ch_bowtie2_mqc.collect().ifEmpty([])
    file ('flagstat/bowtie2/*') from ch_sort_bam_flagstat_mqc.collect().ifEmpty([])
    file ('flagstat/ivar/*') from ch_ivar_flagstat_mqc.collect().ifEmpty([])
    file ('picard/*') from ch_picard_metrics_mqc.collect().ifEmpty([])
    file ('snpeff/highfreq/*') from ch_snpeff_highfreq_mqc.collect().ifEmpty([])
    file ('snpeff/lowfreq/*') from ch_snpeff_lowfreq_mqc.collect().ifEmpty([])
    file ('quast/spades/*') from ch_quast_spades_mqc.collect().ifEmpty([])
    file ('quast/metaspades/*') from ch_quast_metaspades_mqc.collect().ifEmpty([])
    file ('quast/unicycler/*') from ch_quast_unicycler_mqc.collect().ifEmpty([])
    file ('software_versions/*') from ch_software_versions_yaml.collect()
    file workflow_summary from ch_workflow_summary.collectFile(name: "workflow_summary_mqc.yaml")

    output:
    file "*multiqc_report.html" into ch_multiqc_report
    file "*_data"
    file "multiqc_plots"

    script:
    rtitle = custom_runName ? "--title \"$custom_runName\"" : ''
    rfilename = custom_runName ? "--filename " + custom_runName.replaceAll('\\W','_').replaceAll('_+','_') + "_multiqc_report" : ''
    custom_config_file = params.multiqc_config ? "--config $mqc_custom_config" : ''
    """
    multiqc . -f $rtitle $rfilename $custom_config_file \\
        -m custom_content \\
        -m fastqc \\
        -m fastp \\
        -m cutadapt \\
        -m bowtie2 \\
        -m samtools \\
        -m picard \\
        -m snpeff \\
        -m quast
    """
}

/*
 * STEP 11: Output Description HTML
 */
process output_documentation {
    publishDir "${params.outdir}/pipeline_info", mode: params.publish_dir_mode

    input:
    file output_docs from ch_output_docs

    output:
    file "results_description.html"

    script:
    """
    markdown_to_html.py $output_docs -o results_description.html
    """
}

/*
 * Completion e-mail notification
 */
workflow.onComplete {

    // Set up the e-mail variables
    def subject = "[nf-core/viralrecon] Successful: $workflow.runName"
    if (!workflow.success) {
        subject = "[nf-core/viralrecon] FAILED: $workflow.runName"
    }
    def email_fields = [:]
    email_fields['version'] = workflow.manifest.version
    email_fields['runName'] = custom_runName ?: workflow.runName
    email_fields['success'] = workflow.success
    email_fields['dateComplete'] = workflow.complete
    email_fields['duration'] = workflow.duration
    email_fields['exitStatus'] = workflow.exitStatus
    email_fields['errorMessage'] = (workflow.errorMessage ?: 'None')
    email_fields['errorReport'] = (workflow.errorReport ?: 'None')
    email_fields['commandLine'] = workflow.commandLine
    email_fields['projectDir'] = workflow.projectDir
    email_fields['summary'] = summary
    email_fields['summary']['Date Started'] = workflow.start
    email_fields['summary']['Date Completed'] = workflow.complete
    email_fields['summary']['Pipeline script file path'] = workflow.scriptFile
    email_fields['summary']['Pipeline script hash ID'] = workflow.scriptId
    if (workflow.repository) email_fields['summary']['Pipeline repository Git URL'] = workflow.repository
    if (workflow.commitId) email_fields['summary']['Pipeline repository Git Commit'] = workflow.commitId
    if (workflow.revision) email_fields['summary']['Pipeline Git branch/tag'] = workflow.revision
    email_fields['summary']['Nextflow Version'] = workflow.nextflow.version
    email_fields['summary']['Nextflow Build'] = workflow.nextflow.build
    email_fields['summary']['Nextflow Compile Timestamp'] = workflow.nextflow.timestamp

    // On success try attach the multiqc report
    def mqc_report = null
    try {
        if (workflow.success) {
            mqc_report = ch_multiqc_report.getVal()
            if (mqc_report.getClass() == ArrayList) {
                log.warn "[nf-core/viralrecon] Found multiple reports from process 'multiqc', will use only one"
                mqc_report = mqc_report[0]
            }
        }
    } catch (all) {
        log.warn "[nf-core/viralrecon] Could not attach MultiQC report to summary email"
    }

    // Check if we are only sending emails on failure
    email_address = params.email
    if (!params.email && params.email_on_fail && !workflow.success) {
        email_address = params.email_on_fail
    }

    // Render the TXT template
    def engine = new groovy.text.GStringTemplateEngine()
    def tf = new File("$baseDir/assets/email_template.txt")
    def txt_template = engine.createTemplate(tf).make(email_fields)
    def email_txt = txt_template.toString()

    // Render the HTML template
    def hf = new File("$baseDir/assets/email_template.html")
    def html_template = engine.createTemplate(hf).make(email_fields)
    def email_html = html_template.toString()

    // Render the sendmail template
    def smail_fields = [ email: email_address, subject: subject, email_txt: email_txt, email_html: email_html, baseDir: "$baseDir", mqcFile: mqc_report, mqcMaxSize: params.max_multiqc_email_size.toBytes() ]
    def sf = new File("$baseDir/assets/sendmail_template.txt")
    def sendmail_template = engine.createTemplate(sf).make(smail_fields)
    def sendmail_html = sendmail_template.toString()

    // Send the HTML e-mail
    if (email_address) {
        try {
            if (params.plaintext_email) { throw GroovyException('Send plaintext e-mail, not HTML') }
            // Try to send HTML e-mail using sendmail
            [ 'sendmail', '-t' ].execute() << sendmail_html
            log.info "[nf-core/viralrecon] Sent summary e-mail to $email_address (sendmail)"
        } catch (all) {
            // Catch failures and try with plaintext
            [ 'mail', '-s', subject, email_address ].execute() << email_txt
            log.info "[nf-core/viralrecon] Sent summary e-mail to $email_address (mail)"
        }
    }

    // Write summary e-mail HTML to a file
    def output_d = new File("${params.outdir}/pipeline_info/")
    if (!output_d.exists()) {
        output_d.mkdirs()
    }
    def output_hf = new File(output_d, "pipeline_report.html")
    output_hf.withWriter { w -> w << email_html }
    def output_tf = new File(output_d, "pipeline_report.txt")
    output_tf.withWriter { w -> w << email_txt }

    c_green = params.monochrome_logs ? '' : "\033[0;32m";
    c_purple = params.monochrome_logs ? '' : "\033[0;35m";
    c_red = params.monochrome_logs ? '' : "\033[0;31m";
    c_reset = params.monochrome_logs ? '' : "\033[0m";

    if (workflow.stats.ignoredCount > 0 && workflow.success) {
        log.info "-${c_purple}Warning, pipeline completed, but with errored process(es) ${c_reset}-"
        log.info "-${c_red}Number of ignored errored process(es) : ${workflow.stats.ignoredCount} ${c_reset}-"
        log.info "-${c_green}Number of successfully ran process(es) : ${workflow.stats.succeedCount} ${c_reset}-"
    }

    if (workflow.success) {
        log.info "-${c_purple}[nf-core/viralrecon]${c_green} Pipeline completed successfully${c_reset}-"
    } else {
        checkHostname()
        log.info "-${c_purple}[nf-core/viralrecon]${c_red} Pipeline completed with errors${c_reset}-"
    }

}

def nfcoreHeader() {
    // Log colors ANSI codes
    c_black = params.monochrome_logs ? '' : "\033[0;30m";
    c_blue = params.monochrome_logs ? '' : "\033[0;34m";
    c_cyan = params.monochrome_logs ? '' : "\033[0;36m";
    c_dim = params.monochrome_logs ? '' : "\033[2m";
    c_green = params.monochrome_logs ? '' : "\033[0;32m";
    c_purple = params.monochrome_logs ? '' : "\033[0;35m";
    c_reset = params.monochrome_logs ? '' : "\033[0m";
    c_white = params.monochrome_logs ? '' : "\033[0;37m";
    c_yellow = params.monochrome_logs ? '' : "\033[0;33m";

    return """    -${c_dim}--------------------------------------------------${c_reset}-
                                            ${c_green},--.${c_black}/${c_green},-.${c_reset}
    ${c_blue}        ___     __   __   __   ___     ${c_green}/,-._.--~\'${c_reset}
    ${c_blue}  |\\ | |__  __ /  ` /  \\ |__) |__         ${c_yellow}}  {${c_reset}
    ${c_blue}  | \\| |       \\__, \\__/ |  \\ |___     ${c_green}\\`-._,-`-,${c_reset}
                                            ${c_green}`._,._,\'${c_reset}
    ${c_purple}  nf-core/viralrecon v${workflow.manifest.version}${c_reset}
    -${c_dim}--------------------------------------------------${c_reset}-
    """.stripIndent()
}

def checkHostname() {
    def c_reset = params.monochrome_logs ? '' : "\033[0m"
    def c_white = params.monochrome_logs ? '' : "\033[0;37m"
    def c_red = params.monochrome_logs ? '' : "\033[1;91m"
    def c_yellow_bold = params.monochrome_logs ? '' : "\033[1;93m"
    if (params.hostnames) {
        def hostname = "hostname".execute().text.trim()
        params.hostnames.each { prof, hnames ->
            hnames.each { hname ->
                if (hostname.contains(hname) && !workflow.profile.contains(prof)) {
                    log.error "====================================================\n" +
                            "  ${c_red}WARNING!${c_reset} You are running with `-profile $workflow.profile`\n" +
                            "  but your machine hostname is ${c_white}'$hostname'${c_reset}\n" +
                            "  ${c_yellow_bold}It's highly recommended that you use `-profile $prof${c_reset}`\n" +
                            "============================================================"
                }
            }
        }
    }
}
