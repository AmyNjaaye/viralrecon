#!/usr/bin/env nextflow
/*
========================================================================================
                         nf-core/viralrecon
========================================================================================
 nf-core/viralrecon Analysis Pipeline.
 #### Homepage / Documentation
 https://github.com/nf-core/viralrecon
----------------------------------------------------------------------------------------
*/

def helpMessage() {
    // TODO nf-core: Add to this help message with new command line parameters
    log.info nfcoreHeader()
    log.info"""

    Usage:

    The typical command for running the pipeline is as follows:

    nextflow run nf-core/viralrecon --input samplesheet.csv --host_genome 'human' --viral_genome 'NC_045512.2' -profile docker

    Mandatory arguments
      --input [file]                  Comma-separated file containing information about the samples in the experiment (see docs/usage.md)
      -profile [str]                  Configuration profile to use. Can use multiple (comma separated)
                                      Available: conda, docker, singularity, test, awsbatch, <institute> and more

    Generic
      --protocol [str]                Specifies the type of protocol used for sequencing i.e. "metagenomic" or "amplicon". (Default: "metagenomic")
      --amplicon_bed [file]           Path to BED file containing amplicon position
      --amplicon_fasta [file]         Path to fasta file containing amplicon sequences

    References                        If not specified in the configuration file or you wish to overwrite any of the references
      --host_genome [str]             Name of genome reference key for human genome e.g. 'human'

      --viral_genome [str]            Name of genome reference key for viral genome e.g. 'NC_045512.2'
      --viral_fasta [file]            Path to fasta reference for viral genome
      --viral_gff [file]              Full path to viral gff annotation file

      --save_reference [bool]         If generated by the pipeline save the Bowtie2 indices in the results directory (Default: false)

    Kraken2
      --host_kraken2_db [file]        Full path to Kraken2 database built from host genome
      --host_kraken2_name [str]       Name of host genome for building Kraken2 database e.g. 'human'

      --viral_kraken2_db [file]       Full path to Kraken2 database built from viral genome
      --viral_kraken2_name [str]      Name of viral genome for building Kraken2 database e.g. 'viral'

      --kraken2_use_ftp [bool]        Use FTP instead of rsync when building kraken2 databases (Default: false)
      --save_kraken2_fastq [bool]     Save the host and viral fastq files in the results directory (Default: false)

    Trimming
      --adapter_file [file]           Adapters index for adapter removal
      --adapter_params [str]          Trimming parameters for adapters. <seed mismatches>:<palindrome clip threshold>:<simple clip threshold> (Default: 2:30:10)
      --trim_window_length [int]      Window size. (Default: 4)
      --trim_window_value [int]       Window average quality required (Default: 20)
      --trim_min_length [int]         Minimum length of reads (Default: 50)
      --skip_trimming [bool]          Skip the adapter trimming step (Default: false)
      --save_trimmed [bool]           Save the trimmed FastQ files in the results directory (Default: false)

    Alignments
      --save_kraken2_fastq [bool]     Save the host and viral fastq files in the results directory (Default: false)
    Mapping
      --skip_mapping [bool]           Skip Mapping and undergoing steps in the pipeline
      --save_map_intermeds [bool]     Save the intermediate BAM files from the mapping steps (Default: false)
      --save_ivar_intermeds [bool]    Save the intermediate BAM files from iVar step (Default: false)

    De novo assembly
      --assemblers [str]              Specify which assembly algorithms you would like to use (Default:'spades,metaspades,unicycler')
      --skip_assembly [bool]          Skip assembly steps in the pipeline (Default: false)

    Variant calling
      --skip_variants [bool]          Skip variant calling steps in the pipeline (Default: false)

    QC
      --skip_qc [bool]                Skip all QC steps apart from MultiQC (Default: false)
      --skip_fastqc [bool]            Skip FastQC (Default: false)
      --skip_multiqc [bool]           Skip MultiQC (Default: false)

    Other options:
      --outdir [file]                 The output directory where the results will be saved
      --email [email]                 Set this parameter to your e-mail address to get a summary e-mail with details of the run sent to you when the workflow exits
      --email_on_fail [email]         Same as --email, except only send mail if the workflow is not successful
      --max_multiqc_email_size [str]  Theshold size for MultiQC report to be attached in notification email. If file generated by pipeline exceeds the threshold, it will not be attached (Default: 25MB)
      -name [str]                     Name for the pipeline run. If not specified, Nextflow will automatically generate a random mnemonic

    AWSBatch options:
      --awsqueue [str]                The AWSBatch JobQueue that needs to be set when running on AWSBatch
      --awsregion [str]               The AWS Region for your AWS Batch job to run on
      --awscli [str]                  Path to the AWS CLI tool
    """.stripIndent()
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                SET UP CONFIGURATION VARIABLES                       -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

// Show help message
if (params.help) {
    helpMessage()
    exit 0
}

// Has the run name been specified by the user?
// this has the bonus effect of catching both -name and --name
custom_runName = params.name
if (!(workflow.runName ==~ /[a-z]+_[a-z]+/)) {
    custom_runName = workflow.runName
}

////////////////////////////////////////////////////
/* --          VALIDATE INPUTS                 -- */
////////////////////////////////////////////////////

if (params.input) { ch_input = file(params.input, checkIfExists: true) } else { exit 1, "Samplesheet file not specified!" }

if (params.protocol != 'metagenomic' && params.protocol != 'amplicon') {
    exit 1, "Invalid protocol option: ${params.protocol}. Valid options: 'metagenomic' or 'amplicon'"
}
if (params.protocol == 'amplicon' && !params.skip_assembly && !params.amplicon_fasta) {
    exit 1, "If protocol is set to 'amplicon' then please provide a valid amplicon fasta file"
}
if (params.protocol == 'amplicon' && !params.skip_mapping && !params.amplicon_bed) {
    exit 1, "If protocol is set to 'amplicon' and mapping is not skipped, then please provide a valid amplicon BED file"
}
if (params.amplicon_fasta) { ch_amplicon_fasta = Channel.fromPath(params.amplicon_fasta, checkIfExists: true) } else { ch_amplicon_fasta = Channel.empty() }
if (params.amplicon_bed) { ch_amplicon_bed = Channel.fromPath(params.amplicon_bed, checkIfExists: true) } else { ch_amplicon_bed = Channel.empty() }
if (params.adapter_file) {
	Channel.fromPath(params.adapter_file, checkIfExists: true).into{ ch_adapter_assembly_file; ch_adapter_mapping_file }
} else { exit 1, "Adapter file not specified!" }

assemblerList = [ 'spades', 'metaspades', 'unicycler' ]
assemblers = params.assemblers ? params.assemblers.split(',').collect{ it.trim().toLowerCase() } : []
if ((assemblerList + assemblers).unique().size() != assemblerList.size()) {
    exit 1, "Invalid assembler option: ${params.assemblers}. Valid options: ${assemblerList.join(', ')}"
}


// Host reference files
if (params.genomes && params.host_genome && !params.genomes.containsKey(params.host_genome)) {
   exit 1, "The provided genome '${params.host_genome}' is not available in the Genome file. Currently the available genomes are ${params.genomes.keySet().join(", ")}"
}
params.host_kraken2_db = params.host_genome ? params.genomes[ params.host_genome ].kraken2 ?: false : false
params.host_kraken2_name = params.host_genome ? params.genomes[ params.host_genome ].kraken2_name ?: false : false
if (params.host_kraken2_db) { ch_host_kraken2_db = Channel.fromPath(params.host_kraken2_db, checkIfExists: true) }
if (!params.host_kraken2_db && !params.host_kraken2_name) { exit 1, "Please specify a valid name to build Kraken2 database for host e.g. human!" }

// Viral reference files
if (params.genomes && params.viral_genome && !params.genomes.containsKey(params.viral_genome)) {
   exit 1, "The provided genome '${params.viral_genome}' is not available in the Genome file. Currently the available genomes are ${params.genomes.keySet().join(", ")}"
}
params.viral_fasta = params.viral_genome ? params.genomes[ params.viral_genome ].fasta ?: false : false
params.viral_gff = params.viral_genome ? params.genomes[ params.viral_genome ].gff ?: false : false
params.viral_kraken2_db = params.viral_genome ? params.genomes[ params.viral_genome ].kraken2 ?: false : false
params.viral_kraken2_name = params.host_genome ? params.genomes[ params.viral_genome ].kraken2_name ?: false : false

if (params.viral_fasta) {
    lastPath = params.viral_fasta.lastIndexOf(File.separator)
    lastExt = params.viral_fasta.lastIndexOf(".")
    viral_fasta_base = params.viral_fasta.substring(lastPath+1)
    viral_index_base = params.viral_fasta.substring(lastPath+1,lastExt)
    ch_viral_fasta = file(params.viral_fasta, checkIfExists: true)
} else {
    exit 1, "Viral fasta file not specified!"
}
if (params.viral_gff) { ch_viral_gff = file(params.viral_gff, checkIfExists: true) }
if (params.viral_kraken2_db) { ch_viral_kraken2_db = Channel.fromPath(params.viral_kraken2_db, checkIfExists: true) }
if (!params.viral_kraken2_db && !params.viral_kraken2_name) { exit 1, "Please specify a valid name to build Kraken2 database for host e.g. virus!" }

////////////////////////////////////////////////////
/* --          CONFIG FILES                    -- */
////////////////////////////////////////////////////

ch_multiqc_config = file("$baseDir/assets/multiqc_config.yaml", checkIfExists: true)
ch_multiqc_custom_config = params.multiqc_config ? Channel.fromPath(params.multiqc_config, checkIfExists: true) : Channel.empty()
ch_output_docs = file("$baseDir/docs/output.md", checkIfExists: true)

////////////////////////////////////////////////////
/* --          HEADER FILES                    -- */
////////////////////////////////////////////////////

ch_blast_outfmt6_header = file("$baseDir/assets/headers/blast_outfmt6_header.txt", checkIfExists: true)

////////////////////////////////////////////////////
/* --                   AWS                    -- */
////////////////////////////////////////////////////

// Check AWS batch settings
if (workflow.profile.contains('awsbatch')) {
    // AWSBatch sanity checking
    if (!params.awsqueue || !params.awsregion) exit 1, "Specify correct --awsqueue and --awsregion parameters on AWSBatch!"
    // Check outdir paths to be S3 buckets if running on AWSBatch
    // related: https://github.com/nextflow-io/nextflow/issues/813
    if (!params.outdir.startsWith('s3:')) exit 1, "Outdir not on S3 - specify S3 Bucket to run on AWSBatch!"
    // Prevent trace files to be stored on S3 since S3 does not support rolling files.
    if (params.tracedir.startsWith('s3:')) exit 1, "Specify a local tracedir or run without trace! S3 cannot be used for tracefiles."
}

////////////////////////////////////////////////////
/* --                FUNCTIONS                 -- */
////////////////////////////////////////////////////

// Function to check if running offline
def isOffline() {
    try {
        return NXF_OFFLINE as Boolean
    }
    catch( Exception e ) {
        return false
    }
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                       HEADER LOG INFO                               -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

// Header log info
log.info nfcoreHeader()
def summary = [:]
if (workflow.revision)            summary['Pipeline Release'] = workflow.revision
summary['Run Name']               = custom_runName ?: workflow.runName
// TODO nf-core: Report custom parameters here
summary['Samplesheet']            = params.input
summary['Protocol']               = params.protocol
if (params.protocol == 'amplicon') summary['Amplicon Fasta file'] = params.amplicon_fasta
if (params.protocol == 'amplicon') summary['Amplicon BED file'] = params.amplicon_bed
if (params.host_kraken2_db)       summary['Host Kraken2 DB'] = params.host_kraken2_db
summary['Host Kraken2 Name']      = params.host_kraken2_name
summary['Host Genome']            = params.host_genome ?: 'Not supplied'
summary['Viral Genome']           = params.viral_genome ?: 'Not supplied'
summary['Viral Fasta File']       = params.viral_fasta
if (params.viral_gff)             summary['Viral GFF'] = params.viral_gff
if (params.host_kraken2_db)       summary['Host Kraken2 DB'] = params.host_kraken2_db
if (params.host_kraken2_name)     summary['Host Kraken2 Name'] = params.host_kraken2_name
if (params.viral_kraken2_db)      summary['Viral Kraken2 DB'] = params.viral_kraken2_db
if (params.viral_kraken2_name)    summary['Viral Kraken2 Name'] = params.viral_kraken2_name
if (params.kraken2_use_ftp)       summary['Kraken2 Use FTP'] = params.kraken2_use_ftp
if (params.save_kraken2_fastq)    summary['Save Kraken2 FastQ'] = params.save_kraken2_fastq
if (params.save_reference)        summary['Save Genome Indices'] = 'Yes'
if (params.skip_trimming)         summary['Skip Trimming'] = 'Yes'
if (params.save_trimmed)          summary['Save Trimmed'] = 'Yes'
if (params.save_map_intermeds)  summary['Save Intermeds'] =  'Yes'
if (params.skip_assembly)         summary['Skip De novo Assembly'] =  'Yes'
if (params.skip_variants)         summary['Skip Variant Calling'] =  'Yes'
if (params.skip_qc)               summary['Skip QC'] = 'Yes'
if (params.skip_fastqc)           summary['Skip FastQC'] = 'Yes'
if (params.skip_multiqc)          summary['Skip MultiQC'] = 'Yes'
summary['Max Resources']          = "$params.max_memory memory, $params.max_cpus cpus, $params.max_time time per job"
if (workflow.containerEngine)     summary['Container'] = "$workflow.containerEngine - $workflow.container"
summary['Output dir']             = params.outdir
summary['Publish dir mode']       = params.publish_dir_mode
summary['Launch dir']             = workflow.launchDir
summary['Working dir']            = workflow.workDir
summary['Script dir']             = workflow.projectDir
summary['User']                   = workflow.userName
if (workflow.profile.contains('awsbatch')) {
    summary['AWS Region']         = params.awsregion
    summary['AWS Queue']          = params.awsqueue
    summary['AWS CLI']            = params.awscli
}
summary['Config Profile'] = workflow.profile
if (params.config_profile_description) summary['Config Description'] = params.config_profile_description
if (params.config_profile_contact)     summary['Config Contact']     = params.config_profile_contact
if (params.config_profile_url)         summary['Config URL']         = params.config_profile_url
if (params.email || params.email_on_fail) {
    summary['E-mail Address']     = params.email
    summary['E-mail on failure']  = params.email_on_fail
    summary['MultiQC maxsize']    = params.max_multiqc_email_size
}
log.info summary.collect { k,v -> "${k.padRight(18)}: $v" }.join("\n")
log.info "-\033[2m--------------------------------------------------\033[0m-"

// Check the hostnames against configured profiles
checkHostname()

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                     PARSE DESIGN FILE                               -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

/*
 * PREPROCESSING: Reformat samplesheet and check validitiy
 */
process CHECK_SAMPLESHEET {
    tag "$samplesheet"
    publishDir "${params.outdir}/pipeline_info", mode: params.publish_dir_mode

    input:
    file samplesheet from ch_input

    output:
    file "*.csv" into ch_samplesheet_reformat

    script:  // This script is bundled with the pipeline, in nf-core/viralrecon/bin/
    """
    check_samplesheet.py $samplesheet samplesheet_reformat.csv
    """
}

// Function to get list of [ sample, single_end?, is_sra?, [ fastq_1, fastq_2 ] ]
def validate_input(LinkedHashMap sample) {
    def sample_id = sample.sample_id
    def single_end = sample.single_end.toBoolean()
    def is_sra = sample.is_sra.toBoolean()
    def fastq_1 = sample.fastq_1
    def fastq_2 = sample.fastq_2

    def array = []
    if (!is_sra) {
        if (single_end) {
            array = [ sample_id, single_end, is_sra, [ file(fastq_1, checkIfExists: true) ] ]
        } else {
            array = [ sample_id, single_end, is_sra, [ file(fastq_1, checkIfExists: true), file(fastq_2, checkIfExists: true) ] ]
        }
    } else {
        array = [ sample_id, single_end, is_sra, [ ] ]
    }

    return array
}

/*
 * Create channels for input fastq files
 */
ch_samplesheet_reformat
    .splitCsv(header:true, sep:',')
    .map { validate_input(it) }
    .into { ch_reads_fastqc;
            ch_reads_trimmomatic_assembly;
            ch_reads_trimmomatic_mapping}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                     PREPARE REFERENCE FILES                         -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

/*
 * PREPROCESSING: Build Viral Bowtie2 index
 */
process BOWTIE2_INDEX_VIRAL {
    tag "$fasta"
    label 'process_medium'
    publishDir path: { params.save_reference ? "${params.outdir}/genome" : params.outdir },
        saveAs: { params.save_reference ? it : null }, mode: params.publish_dir_mode

    input:
    file fasta from ch_viral_fasta

    output:
    file "Bowtie2IndexViral" into ch_viral_index

    script:
    """
    bowtie2-build \\
        --seed 1 \\
        --threads $task.cpus \\
        $fasta \\
        $viral_index_base
    mkdir Bowtie2IndexViral && mv ${viral_index_base}* Bowtie2IndexViral
    """
}

/*
 * PREPROCESSING: Build Viral Blast database
 */
process BLAST_DB_VIRAL {
    tag "$fasta"
    label 'process_medium'
    publishDir path: { params.save_reference ? "${params.outdir}/genome" : params.outdir },
        saveAs: { params.save_reference ? it : null }, mode: params.publish_dir_mode

    input:
    file fasta from ch_viral_fasta

    output:
    file "BlastDBViral" into ch_viral_blast_db_spades,
                             ch_viral_blast_db_metaspades,
                             ch_viral_blast_db_unicycler

    script:
    """
    makeblastdb \\
        -in $fasta \\
        -parse_seqids \\
        -dbtype nucl
    mkdir BlastDBViral && mv ${fasta}* BlastDBViral
    """
}

/*
 * PREPROCESSING: Build Host Kraken2 database
 */
if (!isOffline()) {
    if (!params.host_kraken2_db) {
        process KRAKEN2_DB_HOST {
            tag "$db"
            label 'process_high'
            publishDir path: { params.save_reference ? "${params.outdir}/genome" : params.outdir },
                saveAs: { params.save_reference ? it : null }, mode: params.publish_dir_mode

            output:
            file "$db" into ch_host_kraken2_db

            script:
            db = "kraken2_${params.host_kraken2_name}"
            ftp = params.kraken2_use_ftp ? "--use-ftp" : ""
            """
            kraken2-build --db $db --threads $task.cpus $ftp --download-taxonomy
            kraken2-build --db $db --threads $task.cpus $ftp --download-library $params.host_kraken2_name
            kraken2-build --db $db --threads $task.cpus $ftp --build

            cd $db
            if [ -d "taxonomy" ]; then rm -rf taxonomy; fi
            if [ -d "library" ]; then rm -rf library; fi
            if [ -f "seqid2taxid.map" ]; then rm seqid2taxid.map; fi
            """
        }
    }
} else {
    exit 1, "NXF_OFFLINE=true or -offline has been set so cannot download files required to build Kraken2 database!"
}

/*
 * PREPROCESSING: Build Viral Kraken2 database
 */
if (!isOffline()) {
    if (!params.viral_kraken2_db) {
        process KRAKEN2_DB_VIRAL {
            tag "$db"
            label 'process_high'
            publishDir path: { params.save_reference ? "${params.outdir}/genome" : params.outdir },
                saveAs: { params.save_reference ? it : null }, mode: params.publish_dir_mode

            output:
            file "$db" into ch_viral_kraken2_db

            script:
            db = "kraken2_${params.viral_kraken2_name}"
            ftp = params.kraken2_use_ftp ? "--use-ftp" : ""
            """
            kraken2-build --db $db --threads $task.cpus $ftp --download-taxonomy
            kraken2-build --db $db --threads $task.cpus $ftp --download-library $params.viral_kraken2_name
            kraken2-build --db $db --threads $task.cpus $ftp --build

            cd $db
            if [ -d "taxonomy" ]; then rm -rf taxonomy; fi
            if [ -d "library" ]; then rm -rf library; fi
            if [ -f "seqid2taxid.map" ]; then rm seqid2taxid.map; fi
            """
        }
    }
} else {
    exit 1, "NXF_OFFLINE=true or -offline has been set so cannot download files required to build Kraken2 database!"
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                     DOWNLOAD SRA FILES                              -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

// GET SRA FASTQ FILES HERE
// MERGE WITH ORIGINAL CHANNELS BEFORE PASSING TO NEXT STEPS

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                        FASTQ QC                                     -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

/*
 * STEP 1: FastQC before trimming
 */
process FASTQC_RAW {
    tag "$sample"
    label 'process_medium'
    publishDir "${params.outdir}/fastqc/raw", mode: params.publish_dir_mode,
        saveAs: { filename ->
                      filename.endsWith(".zip") ? "zips/$filename" : "$filename"
                }

    when:
    !params.skip_fastqc && !params.skip_qc && !is_sra

    input:
    set val(sample), val(single_end), val(is_sra), file(reads) from ch_reads_fastqc

    output:
    file "*.{zip,html}" into ch_fastqc_raw_reports_mqc

    script:
    // Added soft-links to original fastqs for consistent naming in MultiQC
    if (single_end) {
        """
        [ ! -f  ${sample}.fastq.gz ] && ln -s $reads ${sample}.fastq.gz
        fastqc --quiet --threads $task.cpus ${sample}.fastq.gz
        """
    } else {
        """
        [ ! -f  ${sample}_1.fastq.gz ] && ln -s ${reads[0]} ${sample}_1.fastq.gz
        [ ! -f  ${sample}_2.fastq.gz ] && ln -s ${reads[1]} ${sample}_2.fastq.gz
        fastqc --quiet --threads $task.cpus ${sample}_1.fastq.gz
        fastqc --quiet --threads $task.cpus ${sample}_2.fastq.gz
        """
    }
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                        ADAPTER TRIMMING                             -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

/*
* STEP 2.1: Adapter trimming with Trimmomatic
*/
process TRIMMOMATIC_ASSEMBLY {
    tag "$sample"
    label 'process_medium'
    publishDir "${params.outdir}/trimmomatic_assembly", mode: params.publish_dir_mode,
        saveAs: { filename ->
                      if (filename.endsWith(".log")) filename
                      else params.save_trimmed ? filename : null
                }

    when:
    !params.skip_trimming && !is_sra && !params.skip_assembly

    input:
    set val(sample), val(single_end), val(is_sra), file(reads) from ch_reads_trimmomatic_assembly
    file adapters from ch_adapter_assembly_file.collect()
    file amplicons from ch_amplicon_fasta.collect().ifEmpty([])

    output:
    set val(sample), val(single_end), val(is_sra), file("*trimmed*") into ch_trimmomatic_assembly_fastqc,
                                                                          ch_trimmomatic_assembly_kraken2_host,
                                                                          ch_trimmomatic_assembly_kraken2_viral
    set val(sample), val(single_end), val(is_sra), file("*orphan*") into ch_trimmomatic_assembly_orphan
    file '*.log' into ch_trimmomatic_assembly_mqc

    script:
    pe = single_end ? "SE" : "PE"
    adapters = (params.amplicon_fasta && params.protocol == 'amplicon') ? "${amplicons}" : "${adapters}"
    trimmed_reads = single_end ? "${sample}.trimmed.fastq.gz" : "${sample}.trimmed_1.fastq.gz ${sample}.orphan_1.fastq.gz ${sample}.trimmed_2.fastq.gz ${sample}.orphan_2.fastq.gz"
    orphan = single_end ? "touch ${sample}.orphan.fastq.gz" : ""
    """
    trimmomatic $pe \\
        -threads ${task.cpus} \\
        $reads \\
        $trimmed_reads \\
        ILLUMINACLIP:${adapters}:${params.adapter_params} \\
        SLIDINGWINDOW:${params.trim_window_length}:${params.trim_window_value} \\
        MINLEN:${params.trim_min_length} 2> ${sample}.trimmomatic.log
    $orphan
    """
}

process TRIMMOMATIC_MAPPING {
    tag "$sample"
    label 'process_medium'
    publishDir "${params.outdir}/trimmomatic_mapping", mode: params.publish_dir_mode,
        saveAs: { filename ->
                      if (filename.endsWith(".log")) filename
                      else params.save_trimmed ? filename : null
                }

    when:
    !params.skip_trimming && !is_sra && !params.skip_mapping

    input:
    set val(sample), val(single_end), val(is_sra), file(reads) from ch_reads_trimmomatic_mapping
    file adapters from ch_adapter_mapping_file.collect()

    output:
    set val(sample), val(single_end), val(is_sra), file("*trimmed*") into ch_trimmomatic_mapping_fastqc,
                                                                          ch_trimmomatic_mapping_bowtie
    set val(sample), val(single_end), val(is_sra), file("*orphan*") into ch_trimmomatic_mapping_orphan
    file '*.log' into ch_trimmomatic_mapping_mqc

    script:
    pe = single_end ? "SE" : "PE"
    adapters = "${adapters}"
    trimmed_reads = single_end ? "${sample}.trimmed.fastq.gz" : "${sample}.trimmed_1.fastq.gz ${sample}.orphan_1.fastq.gz ${sample}.trimmed_2.fastq.gz ${sample}.orphan_2.fastq.gz"
    orphan = single_end ? "touch ${sample}.orphan.fastq.gz" : ""
    """
    trimmomatic $pe \\
        -threads ${task.cpus} \\
        $reads \\
        $trimmed_reads \\
        ILLUMINACLIP:${adapters}:${params.adapter_params} \\
        SLIDINGWINDOW:${params.trim_window_length}:${params.trim_window_value} \\
        MINLEN:${params.trim_min_length} 2> ${sample}.trimmomatic.log
    $orphan
    """
}
/*
 * STEP 2.2: FastQC after trimming
 */
process FASTQC_TRIM_ASSEMBLY {
    tag "$sample"
    label 'process_medium'
    publishDir "${params.outdir}/fastqc/trim_assembly", mode: params.publish_dir_mode,
        saveAs: { filename ->
                      filename.endsWith(".zip") ? "zips/$filename" : "$filename"
                }

    when:
    !params.skip_fastqc && !params.skip_qc && !is_sra && !params.skip_assembly

    input:
    set val(sample), val(single_end), val(is_sra), file(reads) from ch_trimmomatic_assembly_fastqc

    output:
    file "*.{zip,html}" into ch_fastqc_trim_assembly_reports_mqc

    script:
    """
    fastqc --quiet --threads $task.cpus $reads
    """
}

process FASTQC_TRIM_MAPPING {
    tag "$sample"
    label 'process_medium'
    publishDir "${params.outdir}/fastqc/trim_mapping", mode: params.publish_dir_mode,
        saveAs: { filename ->
                      filename.endsWith(".zip") ? "zips/$filename" : "$filename"
                }

    when:
    !params.skip_fastqc && !params.skip_qc && !is_sra && !params.skip_mapping

    input:
    set val(sample), val(single_end), val(is_sra), file(reads) from ch_trimmomatic_mapping_fastqc

    output:
    file "*.{zip,html}" into ch_fastqc_trim_mapping_reports_mqc

    script:
    """
    fastqc --quiet --threads $task.cpus $reads
    """
}
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                        FILTER HOST READS                            -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

/*
* STEP 3.1: Remove host reads with Kraken2
*/
process KRAKEN2_HOST {
    tag "$db"
    label 'process_high'
    publishDir "${params.outdir}/kraken2/host", mode: params.publish_dir_mode,
            saveAs: { filename ->
                          if (filename.endsWith(".txt")) filename
                          else params.save_kraken2_fastq ? filename : null
                    }

    when:
    !is_sra

    input:
    set val(sample), val(single_end), val(is_sra), file(reads) from ch_trimmomatic_assembly_kraken2_host
    file db from ch_host_kraken2_db.collect()

    output:
    set val(sample), val(single_end), val(is_sra), file("*.viral*") into ch_kraken2_host_viral_spades,
                                                                         ch_kraken2_host_viral_metaspades,
                                                                         ch_kraken2_host_viral_unicycler
    set val(sample), val(single_end), val(is_sra), file("*.host*") into ch_kraken2_host_host_reads
    file "*.report.txt" into ch_kraken2_host_report

    script:
    pe = single_end ? "" : "--paired"
    classified = single_end ? "${sample}.host.fastq" : "${sample}.host#.fastq"
    unclassified = single_end ? "${sample}.viral.fastq" : "${sample}.viral#.fastq"
    """
    DB=$db
    if [[ \$DB == *.tar.gz ]]
    then
        tar -xvf \$DB
        DB=\${DB%.*.*}
    fi

    kraken2 \\
        --db \$DB \\
        --threads $task.cpus \\
        --unclassified-out $unclassified \\
        --classified-out $classified \\
        --report ${sample}.kraken2.report.txt \\
        $pe \\
        --gzip-compressed \\
        $reads
    gzip *.fastq
    """
}

/*
* STEP 3.2: Extract viral reads with Kraken2
*/
process KRAKEN2_VIRAL {
    tag "$db"
    label 'process_high'
    publishDir "${params.outdir}/kraken2/viral", mode: params.publish_dir_mode,
            saveAs: { filename ->
                          if (filename.endsWith(".txt")) filename
                          else params.save_kraken2_fastq ? filename : null
                    }

    when:
    !is_sra

    input:
    set val(sample), val(single_end), val(is_sra), file(reads) from ch_trimmomatic_assembly_kraken2_viral
    file db from ch_viral_kraken2_db.collect()

    output:
    set val(sample), val(single_end), val(is_sra), file("*.viral*") into ch_kraken2_viral_viral_reads
    set val(sample), val(single_end), val(is_sra), file("*.host*") into ch_kraken2_viral_host_reads
    file "*.report.txt" into ch_kraken2_viral_report

    script:
    pe = single_end ? "" : "--paired"
    classified = single_end ? "${sample}.viral.fastq" : "${sample}.viral#.fastq"
    unclassified = single_end ? "${sample}.host.fastq" : "${sample}.host#.fastq"
    """
    DB=$db
    if [[ \$DB == *.tar.gz ]]
    then
        tar -xvf \$DB
        DB=\${DB%.*.*}
    fi

    kraken2 \\
        --db \$DB \\
        --threads $task.cpus \\
        --unclassified-out $unclassified \\
        --classified-out $classified \\
        --report ${sample}.kraken2.report.txt \\
        $pe \\
        --gzip-compressed \\
        $reads
    gzip *.fastq
    """
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                        MAPPING                                      -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

 /*
  * STEP 3.1: Map Illumina read(s) with bowtie2
  */
 process BOWTIE {
     tag "$sample"
     label 'process_low'
     if (params.save_map_intermeds) {
         publishDir "${params.outdir}/bowtie", mode: params.publish_dir_mode
     }

     when:
     !params.skip_mapping && !is_sra

     input:
     set val(sample), val(single_end), val(is_sra), file(reads) from ch_trimmomatic_mapping_bowtie
     file fasta from ch_viral_fasta
     file index from ch_viral_index

     output:
     set val(sample), val(single_end), val(is_sra), file("*.sam") into ch_bowtie_bam

     script:
     input_reads = single_end ? "-U $reads" : "-1 ${reads[0]} -2 ${reads[1]}"
     """
     bowtie2 \\
     --threads ${task.cpus} \\
     --local \\
     -x ${index}/${viral_index_base} \\
     $input_reads \\
     --very-sensitive-local \\
     -S ${sample}.sam
     """
 }

 /*
  * STEP 3.2: Convert BAM to coordinate sorted BAM
  */
 process SORT_BAM {
     tag "$sample"
     label 'process_medium'
     publishDir "${params.outdir}/bowtie", mode: params.publish_dir_mode,
         saveAs: { filename ->
                       if (params.save_map_intermeds) {
                           if (filename.endsWith(".flagstat")) "samtools_stats/$filename"
                           else if (filename.endsWith(".idxstats")) "samtools_stats/$filename"
                           else if (filename.endsWith(".bam.stats")) "samtools_stats/$filename"
                           else if (filename.endsWith(".picard.stats")) "picard_stats/$filename"
                           else filename
                       }
                 }

     when:
     !params.skip_mapping && !is_sra

     input:
     set val(sample), val(single_end), val(is_sra), file(bam) from ch_bowtie_bam
     file fasta from ch_viral_fasta
     file index from ch_viral_index

     output:
     set val(sample), val(single_end), val(is_sra), file("*.sorted.bam") into ch_sort_bam_variantcalling,
                                                                              ch_sort_bam_consensus,
                                                                              ch_sort_bam_ivar
     set val(sample), val(single_end), val(is_sra), file("*.sorted.bam.bai") into ch_sort_bamindex_variantcalling,
                                                                                  ch_sort_bamindex_consensus,
                                                                                  ch_sort_bamindex_ivar

     file "*.{flagstat,idxstats,bam.stats}" into ch_sort_bam_flagstat_mqc
     file "*picard.stats" into ch_sort_bam_picardstat_mqc

     script:
     """
     samtools sort -@ $task.cpus -o ${sample}.sorted.bam -O bam -T $sample $bam
     samtools index ${sample}.sorted.bam
     samtools flagstat ${sample}.sorted.bam > ${sample}.sorted.bam.flagstat
     samtools idxstats ${sample}.sorted.bam > ${sample}.sorted.bam.idxstats
     samtools stats ${sample}.sorted.bam > ${sample}.sorted.bam.stats
     picard CollectWgsMetrics \\
      COVERAGE_CAP=1000000 \\
      INPUT=${sample}.sorted.bam \\
      OUTPUT=${sample}.sorted.bam.picard.stats \\
      REFERENCE_SEQUENCE=$fasta
     """
 }

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                        BAM POST-ANALYSIS                            -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

/*
 * STEP 4.1: Remove amplicon's primers with iVar
 */
if (params.protocol == 'amplicon'){
  process IVAR {
      tag "$sample"
      label 'process_medium'
      publishDir "${params.outdir}/ivar", mode: params.publish_dir_mode,
          saveAs: { filename ->
                        if (params.save_ivar_intermeds) {
                            if (filename.endsWith(".flagstat")) "samtools_stats/$filename"
                            else if (filename.endsWith(".idxstats")) "samtools_stats/$filename"
                            else if (filename.endsWith(".bam.stats")) "samtools_stats/$filename"
                            else if (filename.endsWith(".picard.stats")) "picard_stats/$filename"
                            else filename
                        }
                  }

      when:
      !params.skip_mapping && !is_sra

      input:
      set val(sample), val(single_end), val(is_sra), file(bam) from ch_sort_bam_ivar
      set val(sample), val(single_end), val(is_sra), file(bamindex) from ch_sort_bamindex_ivar
      file amplicons_bed from ch_amplicon_bed.collect().ifEmpty([])
      file fasta from ch_viral_fasta

      output:
      set val(sample), val(is_sra), file("*.sorted.bam") into ch_bam_variantcalling,
                                                              ch_bam_consensus
      set val(sample), val(is_sra), file("*.sorted.bam.bai") into ch_bamindex_variantcalling,
                                                                  ch_bamindex_consensus
      file "*.{flagstat,idxstats,bam.stats}" into ch_ivar_flagstat_mqc
      file "*picard.stats" into ch_ivar_picardstat_mqc

      script:
      """
      samtools view -b -F 4 ${sample}.sorted.bam > ${sample}.onlymapped.bam
      samtools index ${sample}.onlymapped.bam
      ivar trim -e -i ${sample}.onlymapped.bam -b $amplicons_bed -p ${sample}.primertrimmed -q 15 -m 50 -s 4
      samtools sort -o ${sample}.primertrimmed.sorted.bam -O bam -T $sample ${sample}.primertrimmed.bam
      samtools index ${sample}.primertrimmed.sorted.bam
      samtools flagstat ${sample}.primertrimmed.sorted.bam > ${sample}.primertrimmed.sorted.bam.flagstat
      samtools idxstats ${sample}.primertrimmed.sorted.bam > ${sample}.primertrimmed.sorted.bam.idxstats
      samtools stats ${sample}.primertrimmed.sorted.bam > ${sample}.primertrimmed.sorted.bam.stats
      picard CollectWgsMetrics \\
       COVERAGE_CAP=1000000 \\
       INPUT=${sample}.primertrimmed.sorted.bam \\
       OUTPUT=${sample}.primertrimmed.sorted.bam.picard.stats \\
       REFERENCE_SEQUENCE=$fasta
      """
    }
} else {
  ch_sort_bam_variantcalling
    .set { ch_bam_variantcalling }
  ch_sort_bam_consensus
    .set { ch_bam_consensus }
  ch_sort_bamindex_variantcalling
    .set { ch_bamindex_variantcalling }
  ch_sort_bamindex_consensus
    .set { ch_bamindex_consensus }
  ch_ivar_flagstat_mqc = Channel.empty()
  ch_ivar_picardstat_mqc = Channel.empty()
}


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                        DENOVO ASSEMBLY                              -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////
/* --                SPADES                    -- */
////////////////////////////////////////////////////

/*
 * STEPS 6.1 De novo assembly with SPAdes
 */
process SPADES {
    tag "$sample"
    label 'process_medium'
    publishDir "${params.outdir}/spades", mode: params.publish_dir_mode

    when:
    !params.skip_assembly && 'spades' in assemblers && !is_sra

    input:
    set val(sample), val(single_end), val(is_sra), file(reads) from ch_kraken2_host_viral_spades

    output:
    set val(sample), val(single_end), val(is_sra), file("*scaffolds.fasta") into ch_spades_quast,
                                                                                 ch_spades_abacus,
                                                                                 ch_spades_blast

    script:
    input_reads = single_end ? "-s $reads" : "-1 ${reads[0]} -2 ${reads[1]}"
    """
    spades.py \\
        --threads ${task.cpus} \\
        $input_reads \\
        -o ./
    mv scaffolds.fasta ${sample}.scaffolds.fasta
    """
}

/*
 * STEPS 6.2 Run Quast on SPAdes de novo assembly
 */
process QUAST_SPADES {
    label 'process_medium'
    publishDir "${params.outdir}/spades", mode: params.publish_dir_mode

    when:
    !params.skip_assembly && 'spades' in assemblers && !is_sra

    input:
    file scaffolds from ch_spades_quast.collect{ it[3] }
    file fasta from ch_viral_fasta
    file gff from ch_viral_gff

    output:
    file "quast" into ch_quast_spades_results
    file "quast/report.tsv" into ch_quast_spades_mqc

    script:
    """
    GFF=$gff
    if [[ \$GFF == *.gz ]]
    then
        gunzip -f \$GFF
        GFF=\${GFF%.*}
    fi

    quast.py \\
        --output-dir quast \\
        -r $fasta \\
        --features \$GFF \\
        --threads ${task.cpus} \\
        ${scaffolds.join(' ')}
    """
}

/*
 * STEPS 6.3 Run Blast on SPAdes de novo assembly
 */
process BLAST_SPADES {
    tag "$sample"
    label 'process_medium'
    publishDir "${params.outdir}/spades/blast", mode: params.publish_dir_mode

    when:
    !params.skip_assembly && 'spades' in assemblers && !is_sra

    input:
    set val(sample), val(single_end), val(is_sra), file(scaffold) from ch_spades_blast
    file db from ch_viral_blast_db_spades.collect()
    file header from ch_blast_outfmt6_header

    output:
    file "*.blast.txt" into ch_blast_spades_results
    file "*.blast.filt.header.txt" into ch_blast_spades_filt_results

    script:
    """
    blastn \\
        -num_threads ${task.cpus} \\
        -db $db/$viral_fasta_base \\
        -query $scaffold \\
        -outfmt \'6 stitle std slen qlen qcovs\' \\
        -out ${sample}.blast.txt

    awk 'BEGIN{OFS=\"\\t\";FS=\"\\t\"}{print \$0,\$5/\$15,\$5/\$14}' ${sample}.blast.txt | awk 'BEGIN{OFS=\"\\t\";FS=\"\\t\"} \$15 > 200 && \$17 > 0.7 && \$1 !~ /phage/ {print \$0}' > ${sample}.blast.filt.txt
    cat $header ${sample}.blast.filt.txt > ${sample}.blast.filt.header.txt
    """
}

////////////////////////////////////////////////////
/* --               METASPADES                 -- */
////////////////////////////////////////////////////

/*
 * STEPS 7.1 De novo assembly with MetaSPAdes
 */
process METASPADES {
    tag "$sample"
    label 'process_medium'
    publishDir "${params.outdir}/metaspades", mode: params.publish_dir_mode

    when:
    !params.skip_assembly && 'metaspades' in assemblers && !single_end && !is_sra

    input:
    set val(sample), val(single_end), val(is_sra), file(reads) from ch_kraken2_host_viral_metaspades

    output:
    set val(sample), val(single_end), val(is_sra), file("*scaffolds.fasta") into ch_metaspades_quast,
                                                                                 ch_metaspades_abacus,
                                                                                 ch_metaspades_blast

    script:
    """
    spades.py \\
        --meta \\
        --threads ${task.cpus} \\
        -1 ${reads[0]} \\
        -2 ${reads[1]} \\
        -o ./
    mv scaffolds.fasta ${sample}.meta.scaffolds.fasta
    """
}

/*
 * STEPS 7.2 Run Quast on MetaSPAdes de novo assembly
 */
process QUAST_METASPADES {
    label 'process_medium'
    publishDir "${params.outdir}/metaspades", mode: params.publish_dir_mode

    when:
    !params.skip_assembly && 'metaspades' in assemblers && !single_end && !is_sra

    input:
    file scaffolds from ch_metaspades_quast.collect{ it[3] }
    file fasta from ch_viral_fasta
    file gff from ch_viral_gff

    output:
    file "quast" into ch_quast_metaspades_results
    file "quast/report.tsv" into ch_quast_metaspades_mqc

    script:
    """
    GFF=$gff
    if [[ \$GFF == *.gz ]]
    then
        gunzip -f \$GFF
        GFF=\${GFF%.*}
    fi

    quast.py \\
        --output-dir quast \\
        -r $fasta \\
        --features \$GFF \\
        --threads ${task.cpus} \\
        ${scaffolds.join(' ')}
    """
}

/*
 * STEPS 7.3 Run Blast on MetaSPAdes de novo assembly
 */
process BLAST_METASPADES {
    tag "$sample"
    label 'process_medium'
    publishDir "${params.outdir}/metaspades/blast", mode: params.publish_dir_mode

    when:
    !params.skip_assembly && 'metaspades' in assemblers && !single_end && !is_sra

    input:
    set val(sample), val(single_end), val(is_sra), file(scaffold) from ch_metaspades_blast
    file db from ch_viral_blast_db_metaspades.collect()
    file header from ch_blast_outfmt6_header

    output:
    file "*.blast.txt" into ch_blast_metaspades_results
    file "*.blast.filt.header.txt" into ch_blast_metaspades_filt_results

    script:
    """
    blastn \\
        -num_threads ${task.cpus} \\
        -db $db/$viral_fasta_base \\
        -query $scaffold \\
        -outfmt \'6 stitle std slen qlen qcovs\' \\
        -out ${sample}.blast.txt

    awk 'BEGIN{OFS=\"\\t\";FS=\"\\t\"}{print \$0,\$5/\$15,\$5/\$14}' ${sample}.blast.txt | awk 'BEGIN{OFS=\"\\t\";FS=\"\\t\"} \$15 > 200 && \$17 > 0.7 && \$1 !~ /phage/ {print \$0}' > ${sample}.blast.filt.txt
    cat $header ${sample}.blast.filt.txt > ${sample}.blast.filt.header.txt
    """
}

////////////////////////////////////////////////////
/* --               UNICYCLER                  -- */
////////////////////////////////////////////////////

/*
 * STEPS 8.1 De novo assembly with Unicycler
 */
process UNICYCLER {
    tag "$sample"
    label 'process_medium'
    publishDir "${params.outdir}/unicycler", mode: params.publish_dir_mode

    when:
    !params.skip_assembly && 'unicycler' in assemblers && !is_sra

    input:
    set val(sample), val(single_end), val(is_sra), file(reads) from ch_kraken2_host_viral_unicycler

    output:
    set val(sample), val(single_end), val(is_sra), file("*assembly.fasta") into ch_unicycler_quast,
                                                                                ch_unicycler_abacus,
                                                                                ch_unicycler_blast

    script:
    input_reads = single_end ? "-s $reads" : "-1 ${reads[0]} -2 ${reads[1]}"
    """
    unicycler \\
        --threads ${task.cpus} \\
        $input_reads \\
        --out ./
    mv assembly.fasta ${sample}.assembly.fasta
    """
}

/*
 * STEPS 8.2 Run Quast on Unicycler de novo assembly
 */
process QUAST_UNICYCLER {
    label 'process_medium'
    publishDir "${params.outdir}/unicycler", mode: params.publish_dir_mode

    when:
    !params.skip_assembly && 'unicycler' in assemblers && !is_sra

    input:
    file scaffolds from ch_unicycler_quast.collect{ it[3] }
    file fasta from ch_viral_fasta
    file gff from ch_viral_gff

    output:
    file "quast" into ch_quast_unicycler_results
    file "quast/report.tsv" into ch_quast_unicycler_mqc

    script:
    """
    GFF=$gff
    if [[ \$GFF == *.gz ]]
    then
        gunzip -f \$GFF
        GFF=\${GFF%.*}
    fi

    quast.py \\
        --output-dir quast \\
        -r $fasta \\
        --features \$GFF \\
        --threads ${task.cpus} \\
        ${scaffolds.join(' ')}
    """
}

/*
 * STEPS 8.3 Run Blast on MetaSPAdes de novo assembly
 */
process BLAST_UNICYCLER {
    tag "$sample"
    label 'process_medium'
    publishDir "${params.outdir}/unicycler/blast", mode: params.publish_dir_mode

    when:
    !params.skip_assembly && 'unicycler' in assemblers && !is_sra

    input:
    set val(sample), val(single_end), val(is_sra), file(scaffold) from ch_unicycler_blast
    file db from ch_viral_blast_db_unicycler.collect()
    file header from ch_blast_outfmt6_header

    output:
    file "*.blast.txt" into ch_blast_unicycler_results
    file "*.blast.filt.header.txt" into ch_blast_unicycler_filt_results

    script:
    """
    blastn \\
        -num_threads ${task.cpus} \\
        -db $db/$viral_fasta_base \\
        -query $scaffold \\
        -outfmt \'6 stitle std slen qlen qcovs\' \\
        -out ${sample}.blast.txt

    awk 'BEGIN{OFS=\"\\t\";FS=\"\\t\"}{print \$0,\$5/\$15,\$5/\$14}' ${sample}.blast.txt | awk 'BEGIN{OFS=\"\\t\";FS=\"\\t\"} \$15 > 200 && \$17 > 0.7 && \$1 !~ /phage/ {print \$0}' > ${sample}.blast.filt.txt
    cat $header ${sample}.blast.filt.txt > ${sample}.blast.filt.header.txt
    """
}

// /*
//  * STEPS 4.6 ABACAS
//  */
// process abacas {
//   label "small"
//   tag "$prefix"
//   publishDir "${params.outdir}/10-abacas", mode: 'copy',
// 		saveAs: {filename ->
// 			if (filename.indexOf("_abacas.bin") > 0) "abacas/$filename"
// 			else if (filename.indexOf("_abacas.crunch") > 0) "abacas/$filename"
//       else if (filename.indexOf("_abacas.fasta") > 0) "abacas/$filename"
//       else if (filename.indexOf("_abacas.gaps") > 0) "abacas/$filename"
//       else if (filename.indexOf(".tab") > 0) "abacas/$filename"
//       else if (filename.indexOf("_abacas.MULTIFASTA.fa") > 0) "abacas/$filename"
//       else if (filename.indexOf("_abacas.gaps.tab") > 0) "abacas/$filename"
//       else if (filename.indexOf(".delta") > 0) "nucmer/$filename"
//       else if (filename.indexOf(".tiling") > 0) "nucmer/$filename"
//       else if (filename.indexOf(".out") > 0) "nucmer/$filename"
// 			else filename
// 	}
//   input:
//   file scaffolds from spades_scaffold_abacas
//   file refvirus from viral_fasta_file
//
//   output:
//   file "*_abacas.fasta" into abacas_fasta
//   file "*_abacas*" into abacas_results
//
//   script:
//   prefix = scaffolds.baseName - ~/(_scaffolds)?(_paired)?(\.fasta)?(\.gz)?$/
//   """
//   abacas.pl -r $refvirus -q $scaffolds -m -p nucmer -o $prefix"_abacas"
//   mv nucmer.delta $prefix"_abacas_nucmer.delta"
//   mv nucmer.filtered.delta $prefix"_abacas_nucmer.filtered.delta"
//   mv nucmer.tiling $prefix"_abacas_nucmer.tiling"
//   mv unused_contigs.out $prefix"_abacas_unused_contigs.out"
//   """
// }
//
// /*
//  * STEPS 6.1 plasmidID SPADES
//  */
// process plasmidID_spades {
//   label "small"
//   tag "$prefix"
//   publishDir path: { "${params.outdir}/12-plasmidID/SPADES" }, mode: 'copy'
//
//   input:
//   file spades_scaffolds from spades_scaffold_plasmid.filter{ it.size()>0 }
//   file refvirus from viral_fasta_file
//
//   output:
//   file "$prefix" into plasmid_SPADES
//
//   script:
//   prefix = spades_scaffolds.baseName - ~/(_scaffolds)?(_paired)?(\.fasta)?(\.gz)?$/
//   """
//   bash plasmidID.sh -d $refvirus -s $prefix -c $spades_scaffolds --only-reconstruct -C 47 -S 47 -i 60 --no-trim -o .
//   mv NO_GROUP/$prefix ./$prefix
//   """
// }
//
// /*
//  * STEPS 6.1 plasmidID METASPADES
//  */
// process plasmidID_metaspades {
//   label "small"
//   tag "$prefix"
//   publishDir path: { "${params.outdir}/12-plasmidID/META_SPADES" }, mode: 'copy'
//
//   input:
//   file meta_scaffolds from metas_pades_scaffold_plasmid.filter{ it.size()>0 }
//   file refvirus from viral_fasta_file
//
//   output:
//   file "$prefix" into plasmid_METASPADES
//
//   script:
//   prefix = meta_scaffolds.baseName - ~/(_meta_scaffolds)?(\.fasta)?(\.gz)?$/
//   """
//   bash plasmidID.sh -d $refvirus -s $prefix -c $meta_scaffolds --only-reconstruct -C 47 -S 47 -i 60 --no-trim -o .
//   mv NO_GROUP/$prefix ./$prefix
//   """
// }
//
// /*
//  * STEPS 6.1 plasmidID UNICYCLER
//  */
// process plasmidID_unicycler {
//   label "small"
//   tag "$prefix"
//   publishDir path: { "${params.outdir}/12-plasmidID/UNICYCLER" }, mode: 'copy'
//
//   input:
//   file unicycler_assembly from unicycler_assembly_plasmid.filter{ it.size()>0 }
//   file refvirus from viral_fasta_file
//
//   output:
//   file "$prefix" into plasmid_UNICYCLER
//
//   script:
//   prefix = unicycler_assembly.baseName - ~/(_assembly)?(_paired)?(\.fasta)?(\.gz)?$/
//   """
//   bash plasmidID.sh -d $refvirus -s $prefix -c $unicycler_assembly --only-reconstruct -C 47 -S 47 -i 60 --no-trim -o .
//   mv NO_GROUP/$prefix ./$prefix
//   """
// }

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                        VARIANT CALLING                              -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

/*
 * STEPS 9.1 Variant Calling with VarScan
 */
process VARSCAN {
	tag "$sample"
  label 'process_medium'
	publishDir "${params.outdir}/varscan", mode: params.publish_dir_mode,
		saveAs: {filename ->
			if (filename.endsWith("pileup")) "pileup/$filename"
			else if (filename.endsWith("majority.vcf")) "majority_allele/$filename"
      		else if (filename.endsWith("lowfreq.vcf")) "lowfreq_vars/$filename"
      		else filename
	}

  when:
  !params.skip_mapping && !is_sra

	input:
	set val(sample), val(is_sra), file(bam) from ch_bam_variantcalling
  set val(sample), val(is_sra), file(bamindex) from ch_bamindex_variantcalling
  file fasta from ch_viral_fasta
  file index from ch_viral_index

	output:
	file "*pileup" into ch_variantcalling_pileup
  set val(sample), val(is_sra), file("*majority.vcf") into ch_variantcalling_major_annotation,ch_variantcalling_major_consensus
	set val(sample), val(is_sra), file("*lowfreq.vcf") into ch_variantcalling_low_annotation

	script:
	"""
  samtools mpileup \\
        --count-orphans \\
        --max-depth 20000 \\
        --min-BQ 0 \\
        --fasta-ref $fasta \\
        $bam \\
        > ${sample}.pileup
  varscan mpileup2cns \\
        ${sample}.pileup \\
        --min-var-freq 0.02 \\
        --p-value 0.99 \\
        --variants \\
        --output-vcf 1 \\
        > ${sample}.lowfreq.vcf
  varscan mpileup2cns \\
        ${sample}.pileup \\
        --min-var-freq 0.8 \\
        --p-value 0.05 \\
        --variants \\
        --output-vcf 1 \\
        > ${sample}.majority.vcf
	"""
}

/*
 * STEPS 9.2 Variant Calling annotation with SnpEff and SnpSift
 */
process VARIANT_ANNOTATION {
 	tag "$sample"
  label 'process_medium'
  publishDir "${params.outdir}/annotation", mode: params.publish_dir_mode,
		saveAs: {filename ->
			if (filename.endsWith("majority.ann.vcf")) "majority/$filename"
			else if (filename.endsWith("majority.csv")) "majority/$filename"
      else if (filename.endsWith("majority.genes.txt")) "majority/$filename"
      else if (filename.endsWith("majority.snpEff.summary.html")) "majority/$filename"
      else if (filename.endsWith("majority.ann.table.txt")) "majority/$filename"
      else if (filename.endsWith("lowfreq.ann.vcf")) "lowfreq/$filename"
      else if (filename.endsWith("lowfreq.csv")) "lowfreq/$filename"
      else if (filename.endsWith("lowfreq.genes.txt")) "lowfreq/$filename"
      else if (filename.endsWith("lowfreq.snpEff.summary.html")) "lowfreq/$filename"
      else if (filename.endsWith("lowfreq.ann.table.txt")) "lowfreq/$filename"
      else filename
	}

  when:
  !params.skip_mapping && !is_sra


 	input:
	set val(sample), val(is_sra), file(majority_variants) from ch_variantcalling_major_annotation
  set val(sample), val(is_sra), file(low_variants) from ch_variantcalling_low_annotation
  file ('data/genomes/virus.fa') from ch_viral_fasta
  file ('data/virus/genes.gff') from ch_viral_gff


 	output:
  set val(sample), val(is_sra), file("*majority.ann.vcf") into ch_majority_annotated_consensus
  file "*majority.csv" into ch_snpeff_majority_mqc
  file "*majority.{genes.txt,snpEff.summary.html}" into ch_majority_snpeff_summaries
  file "*lowfreq.ann.vcf" into ch_lowfreq_annotated_variants
  file "*lowfreq.{genes.txt,snpEff.summary.html}" into ch_lowfreq_snpeff_summaries
  file "*lowfreq.csv" into ch_snpeff_lowfreq_mqc
  file "*majority.ann.table.txt" into ch_snpsift_majority_table
  file "*lowfreq.ann.table.txt" into ch_snpsift_lowfreq_table

 	script:
 	"""
 	echo "virus.genome : virus" > snpeff.config
  snpEff build -config ./snpeff.config -dataDir ./data -gff3 -v virus
  snpEff virus -config ./snpeff.config -dataDir ./data $majority_variants -csvStats ${sample}.majority.csv > ${sample}.majority.ann.vcf
  mv snpEff_summary.html ${sample}.majority.snpEff.summary.html
  snpEff virus -config ./snpeff.config -dataDir ./data $low_variants -csvStats ${sample}.lowfreq.csv > ${sample}.lowfreq.ann.vcf
  mv snpEff_summary.html ${sample}.lowfreq.snpEff.summary.html
  SnpSift extractFields -s "," \\
        -e "." \\
        ${sample}.majority.ann.vcf \\
        CHROM POS REF ALT \\
        "ANN[*].GENE" "ANN[*].GENEID" \\
        "ANN[*].IMPACT" "ANN[*].EFFECT" \\
        "ANN[*].FEATURE" "ANN[*].FEATUREID" \\
        "ANN[*].BIOTYPE" "ANN[*].RANK" "ANN[*].HGVS_C" \\
        "ANN[*].HGVS_P" "ANN[*].CDNA_POS" "ANN[*].CDNA_LEN" \\
        "ANN[*].CDS_POS" "ANN[*].CDS_LEN" "ANN[*].AA_POS" \\
        "ANN[*].AA_LEN" "ANN[*].DISTANCE" "EFF[*].EFFECT" \\
        "EFF[*].FUNCLASS" "EFF[*].CODON" "EFF[*].AA" "EFF[*].AA_LEN" \\
        > ${sample}.majority.ann.table.txt
  SnpSift extractFields -s "," \\
        -e "." \\
        ${sample}.lowfreq.ann.vcf \\
        CHROM POS REF ALT \\
        "ANN[*].GENE" "ANN[*].GENEID" \\
        "ANN[*].IMPACT" "ANN[*].EFFECT" \\
        "ANN[*].FEATURE" "ANN[*].FEATUREID" \\
        "ANN[*].BIOTYPE" "ANN[*].RANK" "ANN[*].HGVS_C" \\
        "ANN[*].HGVS_P" "ANN[*].CDNA_POS" "ANN[*].CDNA_LEN" \\
        "ANN[*].CDS_POS" "ANN[*].CDS_LEN" "ANN[*].AA_POS" \\
        "ANN[*].AA_LEN" "ANN[*].DISTANCE" "EFF[*].EFFECT" \\
        "EFF[*].FUNCLASS" "EFF[*].CODON" "EFF[*].AA" "EFF[*].AA_LEN" \\
        > ${sample}.lowfreq.ann.table.txt
 	"""
}

/*
 * STEPS 9.3 Consensus Genome generation with Bcftools and masking with Bedtools
 */
process CONSENSUS_GENOME {
  tag "$sample"
  label 'process_medium'
  publishDir "${params.outdir}/mapping_consensus", mode: params.publish_dir_mode,
		saveAs: {filename ->
			if (filename.endsWith("consensus.fasta")) "consensus/$filename"
			else if (filename.endsWith("consensus.masked.fasta")) "masked/$filename"
	}

  when:
  !params.skip_mapping && !is_sra


  input:
  set val(sample), val(is_sra), file(variants) from ch_majority_annotated_consensus
  file fasta from ch_viral_fasta
  set val(sample), val(is_sra), file(sorted_bam) from ch_bam_consensus
  file sorted_bai from ch_bamindex_consensus

  output:
  file "*consensus.fasta" into ch_consensus_fasta
  file "*consensus.masked.fasta" into ch_masked_fasta

  script:
  """
  bgzip -c $variants > ${sample}.${viral_fasta_base}.vcf.gz
  bcftools index ${sample}.${viral_fasta_base}.vcf.gz
  cat $fasta | bcftools consensus ${sample}.${viral_fasta_base}.vcf.gz > ${sample}.${viral_fasta_base}.consensus.fasta
  bedtools genomecov \\
        -bga \\
        -ibam $sorted_bam \\
        -g $fasta | awk '\$4 < 20' | bedtools merge > ${sample}.${viral_fasta_base}.bed4mask.bed
  bedtools maskfasta \\
        -fi ${sample}.${viral_fasta_base}.consensus.fasta \\
        -bed ${sample}.${viral_fasta_base}.bed4mask.bed \\
        -fo ${sample}.${viral_fasta_base}.consensus.masked.fasta
  sed -i 's/${viral_fasta_base}/${sample}/g' ${sample}.${viral_fasta_base}.consensus.masked.fasta
  """
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                          MULTIQC                                    -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

Channel.from(summary.collect{ [it.key, it.value] })
    .map { k,v -> "<dt>$k</dt><dd><samp>${v ?: '<span style=\"color:#999999;\">N/A</a>'}</samp></dd>" }
    .reduce { a, b -> return [a, b].join("\n            ") }
    .map { x -> """
    id: 'nf-core-viralrecon-summary'
    description: " - this information is collected when the pipeline is started."
    section_name: 'nf-core/viralrecon Workflow Summary'
    section_href: 'https://github.com/nf-core/viralrecon'
    plot_type: 'html'
    data: |
        <dl class=\"dl-horizontal\">
            $x
        </dl>
    """.stripIndent() }
    .set { ch_workflow_summary }

/*
 * Parse software version numbers
 */
process get_software_versions {
    publishDir "${params.outdir}/pipeline_info", mode: params.publish_dir_mode,
        saveAs: { filename ->
                      if (filename.indexOf(".csv") > 0) filename
                      else null
                }

    output:
    file 'software_versions_mqc.yaml' into ch_software_versions_yaml
    file "software_versions.csv"

    script:
    // TODO nf-core: Get all tools to print their version number here
    """
    echo $workflow.manifest.version > v_pipeline.txt
    echo $workflow.nextflow.version > v_nextflow.txt
    fastqc --version > v_fastqc.txt
    trimmomatic -version > v_trimmomatic.txt
    bowtie2 --version > v_bowtie2.txt
    kraken2 --version > v_kraken2.txt
    samtools --version > v_samtools.txt
    bedtools --version > v_bedtools.txt
    picard MarkDuplicates --version &> v_picard.txt || true
    echo \$(R --version 2>&1) > v_R.txt
    spades.py --version > v_spades.txt
    unicycler --version > v_unicycler.txt
    quast.py --version > v_quast.txt
    blastn -version > v_blast.txt
    abacas.pl -v &> v_abacas.txt || true
    ivar -v > v_ivar.txt
    echo \$(varscan 2>&1 | head -1) > v_varscan.txt
    snpEff -version > v_snpEff.txt
    echo \$(SnpSift 2>&1 | head -1) > v_SnipSift.txt
    bcftools -v > v_bcftools.txt
    multiqc --version > v_multiqc.txt
    scrape_software_versions.py &> software_versions_mqc.yaml
    """
}

/*
* STEP 10: MultiQC
*/
process MULTIQC {
    publishDir "${params.outdir}/multiqc", mode: params.publish_dir_mode

    input:
    file (multiqc_config) from ch_multiqc_config
    file (mqc_custom_config) from ch_multiqc_custom_config.collect().ifEmpty([])
    // TODO nf-core: Add in log files from your new processes for MultiQC to find!
    file ('fastqc/raw/*') from ch_fastqc_raw_reports_mqc.collect().ifEmpty([])
    file ('fastqc/trim_assembly/*') from ch_fastqc_trim_assembly_reports_mqc.collect().ifEmpty([])
    file ('fastqc/trim_mapping/*') from ch_fastqc_trim_mapping_reports_mqc.collect().ifEmpty([])
    file ('trimmomatic_assembly/*') from ch_trimmomatic_assembly_mqc.collect().ifEmpty([])
    file ('trimmomatic_mapping/*') from ch_trimmomatic_mapping_mqc.collect().ifEmpty([])
    file ('quast/spades/*') from ch_quast_spades_mqc.collect().ifEmpty([])
    file ('quast/metaspades/*') from ch_quast_metaspades_mqc.collect().ifEmpty([])
    file ('quast/unicycler/*') from ch_quast_unicycler_mqc.collect().ifEmpty([])
    file ('mapping/*') from ch_sort_bam_flagstat_mqc.collect().ifEmpty([])
    file ('mapping/*') from ch_sort_bam_picardstat_mqc.collect().ifEmpty([])
    file ('ivar/*') from ch_ivar_flagstat_mqc.collect().ifEmpty([])
    file ('ivar/*') from ch_ivar_picardstat_mqc.collect().ifEmpty([])
    file ('snpeff/majority*') from ch_snpeff_majority_mqc.collect()
    file ('snpeff/lowfreq*') from ch_snpeff_lowfreq_mqc.collect()
    file ('software_versions/*') from ch_software_versions_yaml.collect()
    file workflow_summary from ch_workflow_summary.collectFile(name: "workflow_summary_mqc.yaml")

    output:
    file "*multiqc_report.html" into ch_multiqc_report
    file "*_data"
    file "multiqc_plots"

    script:
    rtitle = custom_runName ? "--title \"$custom_runName\"" : ''
    rfilename = custom_runName ? "--filename " + custom_runName.replaceAll('\\W','_').replaceAll('_+','_') + "_multiqc_report" : ''
    custom_config_file = params.multiqc_config ? "--config $mqc_custom_config" : ''
    // TODO nf-core: Specify which MultiQC modules to use with -m for a faster run time
    """
    multiqc . -f $rtitle $rfilename $custom_config_file \\
        -m custom_content -m fastqc -m trimmomatic -m samtools -m picard -m quast
    """
}

/*
* STEP 11: Output Description HTML
*/
process output_documentation {
    publishDir "${params.outdir}/pipeline_info", mode: params.publish_dir_mode

    input:
    file output_docs from ch_output_docs

    output:
    file "results_description.html"

    script:
    """
    markdown_to_html.py $output_docs -o results_description.html
    """
}

/*
 * Completion e-mail notification
 */
workflow.onComplete {

    // Set up the e-mail variables
    def subject = "[nf-core/viralrecon] Successful: $workflow.runName"
    if (!workflow.success) {
        subject = "[nf-core/viralrecon] FAILED: $workflow.runName"
    }
    def email_fields = [:]
    email_fields['version'] = workflow.manifest.version
    email_fields['runName'] = custom_runName ?: workflow.runName
    email_fields['success'] = workflow.success
    email_fields['dateComplete'] = workflow.complete
    email_fields['duration'] = workflow.duration
    email_fields['exitStatus'] = workflow.exitStatus
    email_fields['errorMessage'] = (workflow.errorMessage ?: 'None')
    email_fields['errorReport'] = (workflow.errorReport ?: 'None')
    email_fields['commandLine'] = workflow.commandLine
    email_fields['projectDir'] = workflow.projectDir
    email_fields['summary'] = summary
    email_fields['summary']['Date Started'] = workflow.start
    email_fields['summary']['Date Completed'] = workflow.complete
    email_fields['summary']['Pipeline script file path'] = workflow.scriptFile
    email_fields['summary']['Pipeline script hash ID'] = workflow.scriptId
    if (workflow.repository) email_fields['summary']['Pipeline repository Git URL'] = workflow.repository
    if (workflow.commitId) email_fields['summary']['Pipeline repository Git Commit'] = workflow.commitId
    if (workflow.revision) email_fields['summary']['Pipeline Git branch/tag'] = workflow.revision
    email_fields['summary']['Nextflow Version'] = workflow.nextflow.version
    email_fields['summary']['Nextflow Build'] = workflow.nextflow.build
    email_fields['summary']['Nextflow Compile Timestamp'] = workflow.nextflow.timestamp

    // TODO nf-core: If not using MultiQC, strip out this code (including params.max_multiqc_email_size)
    // On success try attach the multiqc report
    def mqc_report = null
    try {
        if (workflow.success) {
            mqc_report = ch_multiqc_report.getVal()
            if (mqc_report.getClass() == ArrayList) {
                log.warn "[nf-core/viralrecon] Found multiple reports from process 'multiqc', will use only one"
                mqc_report = mqc_report[0]
            }
        }
    } catch (all) {
        log.warn "[nf-core/viralrecon] Could not attach MultiQC report to summary email"
    }

    // Check if we are only sending emails on failure
    email_address = params.email
    if (!params.email && params.email_on_fail && !workflow.success) {
        email_address = params.email_on_fail
    }

    // Render the TXT template
    def engine = new groovy.text.GStringTemplateEngine()
    def tf = new File("$baseDir/assets/email_template.txt")
    def txt_template = engine.createTemplate(tf).make(email_fields)
    def email_txt = txt_template.toString()

    // Render the HTML template
    def hf = new File("$baseDir/assets/email_template.html")
    def html_template = engine.createTemplate(hf).make(email_fields)
    def email_html = html_template.toString()

    // Render the sendmail template
    def smail_fields = [ email: email_address, subject: subject, email_txt: email_txt, email_html: email_html, baseDir: "$baseDir", mqcFile: mqc_report, mqcMaxSize: params.max_multiqc_email_size.toBytes() ]
    def sf = new File("$baseDir/assets/sendmail_template.txt")
    def sendmail_template = engine.createTemplate(sf).make(smail_fields)
    def sendmail_html = sendmail_template.toString()

    // Send the HTML e-mail
    if (email_address) {
        try {
            if (params.plaintext_email) { throw GroovyException('Send plaintext e-mail, not HTML') }
            // Try to send HTML e-mail using sendmail
            [ 'sendmail', '-t' ].execute() << sendmail_html
            log.info "[nf-core/viralrecon] Sent summary e-mail to $email_address (sendmail)"
        } catch (all) {
            // Catch failures and try with plaintext
            [ 'mail', '-s', subject, email_address ].execute() << email_txt
            log.info "[nf-core/viralrecon] Sent summary e-mail to $email_address (mail)"
        }
    }

    // Write summary e-mail HTML to a file
    def output_d = new File("${params.outdir}/pipeline_info/")
    if (!output_d.exists()) {
        output_d.mkdirs()
    }
    def output_hf = new File(output_d, "pipeline_report.html")
    output_hf.withWriter { w -> w << email_html }
    def output_tf = new File(output_d, "pipeline_report.txt")
    output_tf.withWriter { w -> w << email_txt }

    c_green = params.monochrome_logs ? '' : "\033[0;32m";
    c_purple = params.monochrome_logs ? '' : "\033[0;35m";
    c_red = params.monochrome_logs ? '' : "\033[0;31m";
    c_reset = params.monochrome_logs ? '' : "\033[0m";

    if (workflow.stats.ignoredCount > 0 && workflow.success) {
        log.info "-${c_purple}Warning, pipeline completed, but with errored process(es) ${c_reset}-"
        log.info "-${c_red}Number of ignored errored process(es) : ${workflow.stats.ignoredCount} ${c_reset}-"
        log.info "-${c_green}Number of successfully ran process(es) : ${workflow.stats.succeedCount} ${c_reset}-"
    }

    if (workflow.success) {
        log.info "-${c_purple}[nf-core/viralrecon]${c_green} Pipeline completed successfully${c_reset}-"
    } else {
        checkHostname()
        log.info "-${c_purple}[nf-core/viralrecon]${c_red} Pipeline completed with errors${c_reset}-"
    }

}

def nfcoreHeader() {
    // Log colors ANSI codes
    c_black = params.monochrome_logs ? '' : "\033[0;30m";
    c_blue = params.monochrome_logs ? '' : "\033[0;34m";
    c_cyan = params.monochrome_logs ? '' : "\033[0;36m";
    c_dim = params.monochrome_logs ? '' : "\033[2m";
    c_green = params.monochrome_logs ? '' : "\033[0;32m";
    c_purple = params.monochrome_logs ? '' : "\033[0;35m";
    c_reset = params.monochrome_logs ? '' : "\033[0m";
    c_white = params.monochrome_logs ? '' : "\033[0;37m";
    c_yellow = params.monochrome_logs ? '' : "\033[0;33m";

    return """    -${c_dim}--------------------------------------------------${c_reset}-
                                            ${c_green},--.${c_black}/${c_green},-.${c_reset}
    ${c_blue}        ___     __   __   __   ___     ${c_green}/,-._.--~\'${c_reset}
    ${c_blue}  |\\ | |__  __ /  ` /  \\ |__) |__         ${c_yellow}}  {${c_reset}
    ${c_blue}  | \\| |       \\__, \\__/ |  \\ |___     ${c_green}\\`-._,-`-,${c_reset}
                                            ${c_green}`._,._,\'${c_reset}
    ${c_purple}  nf-core/viralrecon v${workflow.manifest.version}${c_reset}
    -${c_dim}--------------------------------------------------${c_reset}-
    """.stripIndent()
}

def checkHostname() {
    def c_reset = params.monochrome_logs ? '' : "\033[0m"
    def c_white = params.monochrome_logs ? '' : "\033[0;37m"
    def c_red = params.monochrome_logs ? '' : "\033[1;91m"
    def c_yellow_bold = params.monochrome_logs ? '' : "\033[1;93m"
    if (params.hostnames) {
        def hostname = "hostname".execute().text.trim()
        params.hostnames.each { prof, hnames ->
            hnames.each { hname ->
                if (hostname.contains(hname) && !workflow.profile.contains(prof)) {
                    log.error "====================================================\n" +
                            "  ${c_red}WARNING!${c_reset} You are running with `-profile $workflow.profile`\n" +
                            "  but your machine hostname is ${c_white}'$hostname'${c_reset}\n" +
                            "  ${c_yellow_bold}It's highly recommended that you use `-profile $prof${c_reset}`\n" +
                            "============================================================"
                }
            }
        }
    }
}
